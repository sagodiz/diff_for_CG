digraph graphname {
rankdir="LR";
92 [label="CallGraphTest.<init>()V:2"]
93 [label="CallGraphTest.main([Ljava/lang/String;)V:5"]
57 [label="anonymAndInner.AnonymAndInnerTest$1.<init>(LanonymAndInner/AnonymAndInnerTest;)V:1"]
49 [label="anonymAndInner.AnonymAndInnerTest$1.foo()V:25"]
47 [label="anonymAndInner.AnonymAndInnerTest$2.<init>(LanonymAndInner/AnonymAndInnerTest;)V:1"]
48 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Child1;)V:36"]
50 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Interface;)V:1"]
46 [label="anonymAndInner.AnonymAndInnerTest.<init>()V:3"]
56 [label="anonymAndInner.AnonymAndInnerTest.anonim()V:21"]
51 [label="anonymAndInner.AnonymAndInnerTest.innerClass()V:9"]
63 [label="anonymAndInner.AnonymAndInnerTest.main([Ljava/lang/String;)V:61"]
58 [label="anonymAndInner.AnonymAndInnerTest.nested()V:48"]
62 [label="anonymAndInner.AnonymAndInnerTest.test()V:55"]
54 [label="anonymAndInner.Outer$Inner.<init>(LanonymAndInner/Outer;)V:10"]
55 [label="anonymAndInner.Outer$Inner.inner()V:12"]
59 [label="anonymAndInner.Outer$Nested.<init>()V:16"]
60 [label="anonymAndInner.Outer$Nested.nested()V:22"]
61 [label="anonymAndInner.Outer$Nested.staticNested()V:18"]
52 [label="anonymAndInner.Outer.<init>()V:3"]
53 [label="anonymAndInner.Outer.inner()V:6"]
17 [label="dynamic.DynamicTest.<init>()V:9"]
30 [label="dynamic.DynamicTest.main([Ljava/lang/String;)V:55"]
24 [label="dynamic.DynamicTest.methodHandle()V:37"]
18 [label="dynamic.DynamicTest.reflection()V:16"]
29 [label="dynamic.DynamicTest.test()V:51"]
12 [label="generics.Generic1.<init>()V:3"]
14 [label="generics.Generic1.generic(Lhelper/Interface;)V:9"]
35 [label="generics.Generic2.<init>()V:3"]
36 [label="generics.Generic2.generic(Lhelper/Interface;Lgenerics/Generic1;)V:8"]
11 [label="generics.Generic3.<init>()V:3"]
13 [label="generics.Generic3.foo()V:8"]
64 [label="generics.GenericsTest.<init>()V:3"]
65 [label="generics.GenericsTest.genericMethod(Lhelper/Interface;)V:8"]
67 [label="generics.GenericsTest.main([Ljava/lang/String;)V:30"]
66 [label="generics.GenericsTest.test()V:13"]
5 [label="helper.Abstract.<init>()V:3"]
16 [label="helper.Abstract.foo()V:5"]
121 [label="helper.Base.<init>()V:3"]
122 [label="helper.Base.base()V:5"]
8 [label="helper.Child1.<init>()V:3"]
39 [label="helper.Child1.child1()V:11"]
15 [label="helper.Child1.foo()V:8"]
38 [label="helper.Child1.goo()V:5"]
4 [label="helper.Child2.<init>()V:3"]
86 [label="helper.Child2.goo()V:5"]
89 [label="helper.Child2.hoo()V:8"]
84 [label="helper.Child3.<init>()V:3"]
87 [label="helper.Child3.hoo()V:5"]
125 [label="helper.Debug.<clinit>()V:4"]
126 [label="helper.Debug.<init>()V:3"]
1 [label="helper.Debug.debug(Ljava/lang/String;)V:7"]
88 [label="helper.Interface.hoo()V:7"]
40 [label="initialization.Constructor.<init>()V:12"]
41 [label="initialization.Constructor.callPrivate()V:9"]
42 [label="initialization.Constructor.privateMethod()V:6"]
119 [label="initialization.Init.<init>(Lhelper/Interface;)V:14"]
94 [label="initialization.InitializationTest.<init>()V:5"]
127 [label="initialization.InitializationTest.main([Ljava/lang/String;)V:21"]
95 [label="initialization.InitializationTest.test()V:14"]
2 [label="initialization.IntermediateInitialization.<init>()V:3"]
3 [label="initialization.IntermediateInitialization.instantiateChild1()Lhelper/Child1;:6"]
0 [label="initialization.StaticInit.<clinit>()V:7"]
9 [label="initialization.StaticInit.<init>()V:3"]
10 [label="initialization.StaticInit.staticInit()V:15"]
7 [label="java.io.PrintStream.println(Ljava/lang/String;)V:805"]
19 [label="java.lang.Class.forName(Ljava/lang/String;)Ljava/lang/Class;:-1"]
20 [label="java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;:1783"]
6 [label="java.lang.Object.<init>()V:37"]
115 [label="java.lang.String.<init>(Ljava/lang/String;)V:151"]
116 [label="java.lang.String.toLowerCase()Ljava/lang/String;:2670"]
28 [label="java.lang.Throwable.printStackTrace()V:634"]
106 [label="java.lang.invoke.LambdaMetafactory.accept$java8$MethodReference$0()Ljava/util/function/Consumer;:-1"]
117 [label="java.lang.invoke.LambdaMetafactory.compare$java8$Java8Test$0()Ljava8/Lambda;:-1"]
110 [label="java.lang.invoke.LambdaMetafactory.doSomething$java8$Java8Test$1()Ljava8/FunctionalInterface;:-1"]
112 [label="java.lang.invoke.LambdaMetafactory.doSomething$java8$Java8Test$2()Ljava8/FunctionalInterface;:-1"]
27 [label="java.lang.invoke.MethodHandles$Lookup.findStatic(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;:780"]
26 [label="java.lang.invoke.MethodHandles.lookup()Ljava/lang/invoke/MethodHandles$Lookup;:94"]
25 [label="java.lang.invoke.MethodType.methodType(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;:274"]
21 [label="java.lang.reflect.AccessibleObject.setAccessible(Z)V:127"]
22 [label="java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;:488"]
104 [label="java.util.ArrayList.<init>()V:164"]
105 [label="java.util.ArrayList.add(Ljava/lang/Object;)Z:458"]
107 [label="java.util.ArrayList.forEach(Ljava/util/function/Consumer;)V:1243"]
96 [label="java8.Java8Test.<init>()V:3"]
100 [label="java8.Java8Test.functionalInterface()V:25"]
101 [label="java8.Java8Test.functionalInterface2()V:35"]
114 [label="java8.Java8Test.lambda$3(Ljava/lang/String;)Ljava/lang/String;:36"]
98 [label="java8.Java8Test.lambda()V:9"]
120 [label="java8.Java8Test.main([Ljava/lang/String;)V:50"]
99 [label="java8.Java8Test.methodReference()V:15"]
97 [label="java8.Java8Test.test()V:42"]
102 [label="java8.MethodReference.<init>()V:18"]
103 [label="java8.MethodReference.doSomething()V:28"]
109 [label="java8.MethodReference.print(Ljava/lang/String;)Ljava/lang/String;:10"]
23 [label="java8.MethodReference.privatePrint()V:15"]
31 [label="parser.ForParser.<init>()V:3"]
32 [label="parser.ForParser.foo()V:8"]
33 [label="parser.ForParser.goo()V:12"]
37 [label="parser.ForParser.validGenericMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:25"]
34 [label="parser.ForParser.validMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:17"]
43 [label="parser.ParserTest.<init>()V:3"]
45 [label="parser.ParserTest.main([Ljava/lang/String;)V:23"]
44 [label="parser.ParserTest.test()V:12"]
70 [label="polimorph.Overload.<init>()V:3"]
75 [label="polimorph.Overload.foo()V:5"]
76 [label="polimorph.Overload.foo(I)V:8"]
78 [label="polimorph.Overload.foo(I[Ljava/lang/Object;)V:14"]
77 [label="polimorph.Overload.foo(Ljava/lang/Object;)V:11"]
71 [label="polimorph.Overload.overload1()V:21"]
72 [label="polimorph.Overload.overload2()V:29"]
73 [label="polimorph.Overload.overload3()V:37"]
74 [label="polimorph.Overload.overload4()V:45"]
80 [label="polimorph.Polimorph.<init>()V:3"]
83 [label="polimorph.Polimorph.abstractClassImplementation()V:84"]
81 [label="polimorph.Polimorph.interfaceImplementation()V:59"]
82 [label="polimorph.Polimorph.interfaceImplementation2()V:74"]
123 [label="polimorph.Polimorph.overloadedInterface()V:28"]
85 [label="polimorph.Polimorph.overloadedInterface(Lhelper/Interface;)V:13"]
124 [label="polimorph.Polimorph.overloadedInterface2()V:43"]
68 [label="polimorph.PolimorphTest.<init>()V:3"]
91 [label="polimorph.PolimorphTest.main([Ljava/lang/String;)V:29"]
69 [label="polimorph.PolimorphTest.overload()V:5"]
79 [label="polimorph.PolimorphTest.polimorphic()V:15"]
90 [label="polimorph.PolimorphTest.test()V:24"]
118 [label="wala.lambda$java8$Java8Test$0.compare(II)Z:-1"]
111 [label="wala.lambda$java8$Java8Test$1.doSomething(Ljava/lang/String;)Ljava/lang/String;:-1"]
113 [label="wala.lambda$java8$Java8Test$2.doSomething(Ljava/lang/String;)Ljava/lang/String;:-1"]
108 [label="wala.lambda$java8$MethodReference$0.accept(Ljava/lang/Object;)V:-1"]
0 -> 1
0 -> 2
0 -> 3
0 -> 4
1 -> 7
2 -> 6
3 -> 1
3 -> 8
4 -> 5
5 -> 6
8 -> 5
9 -> 6
10 -> 1
11 -> 12
12 -> 6
13 -> 1
13 -> 8
13 -> 14
14 -> 1
14 -> 15
14 -> 16
15 -> 1
16 -> 1
17 -> 6
18 -> 1
18 -> 7
18 -> 19
18 -> 20
18 -> 21
18 -> 22
23 -> 1
24 -> 1
24 -> 7
24 -> 25
24 -> 26
24 -> 27
24 -> 28
29 -> 18
29 -> 24
30 -> 17
30 -> 29
31 -> 6
32 -> 1
33 -> 1
34 -> 1
34 -> 35
34 -> 36
35 -> 6
36 -> 1
36 -> 14
36 -> 16
37 -> 1
37 -> 12
37 -> 35
37 -> 36
38 -> 1
39 -> 1
40 -> 1
40 -> 6
41 -> 42
43 -> 6
44 -> 1
44 -> 4
44 -> 12
44 -> 31
44 -> 32
44 -> 33
44 -> 34
44 -> 36
44 -> 37
45 -> 43
45 -> 44
46 -> 6
47 -> 12
48 -> 1
48 -> 15
48 -> 49
49 -> 1
50 -> 48
51 -> 1
51 -> 52
51 -> 53
52 -> 6
53 -> 1
53 -> 54
53 -> 55
54 -> 6
55 -> 1
56 -> 1
56 -> 38
56 -> 47
56 -> 49
56 -> 50
56 -> 57
57 -> 8
58 -> 1
58 -> 59
58 -> 60
58 -> 61
59 -> 6
60 -> 1
61 -> 1
62 -> 51
62 -> 56
62 -> 58
63 -> 46
63 -> 62
64 -> 6
65 -> 1
65 -> 16
66 -> 1
66 -> 4
66 -> 8
66 -> 11
66 -> 12
66 -> 13
66 -> 14
66 -> 35
66 -> 36
66 -> 65
67 -> 64
67 -> 66
68 -> 6
69 -> 1
69 -> 70
69 -> 71
69 -> 72
69 -> 73
69 -> 74
70 -> 6
71 -> 1
71 -> 75
72 -> 1
72 -> 76
73 -> 1
73 -> 77
74 -> 1
74 -> 78
75 -> 1
76 -> 1
77 -> 1
78 -> 1
79 -> 1
79 -> 80
79 -> 81
79 -> 82
79 -> 83
79 -> 84
79 -> 85
80 -> 6
81 -> 8
81 -> 15
81 -> 38
81 -> 88
82 -> 4
82 -> 16
82 -> 89
83 -> 8
83 -> 15
84 -> 4
85 -> 1
85 -> 16
85 -> 86
85 -> 87
86 -> 1
87 -> 1
88 -> 1
89 -> 1
90 -> 1
90 -> 69
90 -> 79
91 -> 68
91 -> 90
92 -> 6
93 -> 17
93 -> 29
93 -> 43
93 -> 44
93 -> 46
93 -> 62
93 -> 64
93 -> 66
93 -> 68
93 -> 90
93 -> 94
93 -> 95
93 -> 96
93 -> 97
94 -> 6
95 -> 1
95 -> 8
95 -> 10
95 -> 40
95 -> 119
96 -> 6
97 -> 1
97 -> 98
97 -> 99
97 -> 100
97 -> 101
98 -> 1
98 -> 117
98 -> 118
99 -> 1
99 -> 102
99 -> 103
100 -> 1
100 -> 110
100 -> 111
101 -> 1
101 -> 110
101 -> 111
101 -> 112
101 -> 113
102 -> 6
102 -> 104
102 -> 105
103 -> 106
103 -> 107
108 -> 109
109 -> 1
111 -> 109
113 -> 114
114 -> 7
114 -> 8
114 -> 115
114 -> 116
119 -> 1
119 -> 2
119 -> 3
119 -> 4
119 -> 6
119 -> 8
120 -> 96
120 -> 97
121 -> 6
122 -> 1
123 -> 1
123 -> 16
123 -> 84
123 -> 86
123 -> 87
124 -> 1
124 -> 4
124 -> 16
124 -> 86
124 -> 89
126 -> 6
127 -> 94
127 -> 95
}
