digraph "call-graph" {
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"
    "<java.lang.Object: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.File: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>"
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.System: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ThreadLocal: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.ThreadLocal: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>"
    "<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>";
    "<java.lang.ThreadLocal: void <init>()>"
    "<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>"->"<java.lang.ThreadLocal: void <init>()>";
    "<java.lang.ThreadLocal: void set(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.ThreadLocal: void set(java.lang.Object)>";
    "<java.io.PrintStream: void println(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void <init>()>";
    "<java.util.HashMap: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.HashMap: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.HashMap: void <init>()>";
    "<java.lang.Object: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>";
    "<java.io.BufferedReader: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>";
    "<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.TreeMap: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.FileOutputStream: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileOutputStream: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: void <clinit>()>";
    "<java.lang.Short: java.lang.Short valueOf(short)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: java.lang.Short valueOf(short)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: java.lang.Short valueOf(short)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<java.lang.Long: java.lang.Long valueOf(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.ConcurrentHashMap: void <clinit>()>"
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.atomic.AtomicReference: void <clinit>()>"
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: void <clinit>()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>";
    "<java.util.TimeZone: java.util.TimeZone getDefault()>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.TimeZone: java.util.TimeZone getDefault()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "<java.lang.System: java.lang.String getProperty(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.TimeZone: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.TimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>";
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>";
    "<java.lang.Character: boolean isDigit(char)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Character: boolean isDigit(char)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void <clinit>()>"
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"
    "<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: int digit(char,int)>"
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Character: int digit(char,int)>";
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Math: void <clinit>()>"
    "<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Math: double log(double)>"
    "<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Math: double log(double)>";
    "<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void <clinit>()>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Class: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Math: double log(double)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: void <clinit>()>";
    "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>"
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Collections: void <clinit>()>"
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.Collections: void <clinit>()>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<java.util.Collections: java.util.Set singleton(java.lang.Object)>"
    "<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.util.Collections: java.util.Set singleton(java.lang.Object)>";
    "<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ref.Reference: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ref.Reference: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>"
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>";
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuilder: void <init>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>"->"<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Integer: int intValue()>"
    "<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: int intValue()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: java.lang.String getID()>"
    "<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<java.io.IOException: void <init>(java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>"->"<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<java.io.DataInputStream: int readUnsignedByte()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: java.lang.String readUTF()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: long readLong()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: long readLong()>";
    "<java.io.DataInputStream: int readUnsignedShort()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "<java.io.DataInputStream: int readInt()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readInt()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.io.DataInputStream: boolean readBoolean()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: boolean readBoolean()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: byte readByte()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: byte readByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: boolean readBoolean()>";
    "<java.io.DataInputStream: void <init>(java.io.InputStream)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.io.DataInputStream: void <init>(java.io.InputStream)>";
    "<java.lang.ref.SoftReference: void <init>(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ref.SoftReference: void <init>(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>";
    "<java.io.FileInputStream: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.FileInputStream: void <clinit>()>";
    "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void printStackTrace()>"
    "<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>"->"<java.lang.Throwable: void printStackTrace()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: void <init>(int)>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider$1: java.lang.Object run()>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider$1: java.lang.Object run()>";
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"
    "<org.joda.time.tz.ZoneInfoProvider$1: java.lang.Object run()>"->"<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>";
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$000(org.joda.time.tz.ZoneInfoProvider)>"
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$000(org.joda.time.tz.ZoneInfoProvider)>";
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$000(org.joda.time.tz.ZoneInfoProvider)>";
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassLoader: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.ClassLoader: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.io.File: void <init>(java.io.File,java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "<java.io.FileInputStream: void <init>(java.io.File)>"
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.io.FileInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.IllegalArgumentException: void <init>()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: boolean contains(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<java.util.ArrayList: boolean isEmpty()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<java.util.ArrayList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>"
    "<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>";
    "<org.joda.time.chrono.BaseChronology: void <init>()>"
    "<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>"->"<org.joda.time.chrono.BaseChronology: void <init>()>";
    "<org.joda.time.Chronology: void <init>()>"
    "<org.joda.time.chrono.BaseChronology: void <init>()>"->"<org.joda.time.Chronology: void <init>()>";
    "<org.joda.time.Chronology: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.UTCProvider: void <init>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.tz.UTCProvider: void <init>()>";
    "<org.joda.time.tz.UTCProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Throwable: void printStackTrace()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.Collections: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.TreeSet: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.TreeSet: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.ref.Reference: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.lang.String: java.lang.String intern()>"
    "<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.ref.SoftReference: void <init>(java.lang.Object)>";
    "<java.io.FilterInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.FilterInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.FilterInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.DataInputStream: void <init>(java.io.InputStream)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: void <init>()>"
    "<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<java.util.TreeSet: void <init>(java.util.Collection)>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.TreeSet: void <init>(java.util.Collection)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.String: boolean endsWith(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>";
    "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.io.File: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.Collections: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.TreeSet: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.TreeSet: void <init>(java.util.Collection)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.io.File: boolean exists()>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.File: boolean exists()>";
    "<java.io.File: boolean isDirectory()>"
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.File: boolean isDirectory()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<java.lang.StringBuffer: java.lang.Appendable append(char)>"
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>"
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
    "<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<java.lang.StringBuilder: int length()>"
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: int length()>";
    "<java.lang.StringBuilder: char charAt(int)>"
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<java.lang.StringBuilder: void setCharAt(int,char)>"
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: void setCharAt(int,char)>";
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.String: int length()>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: int length()>";
    "<java.lang.String: char charAt(int)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"
    "<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"
    "<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Arrays: void <clinit>()>"
    "<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: void sort(java.lang.Object[],int,int)>"
    "<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.util.Arrays: void sort(java.lang.Object[],int,int)>";
    "<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>"
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"
    "<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"<org.joda.time.chrono.BaseChronology: void <init>()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"
    "<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: void setFields()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.DateTimeField: void <init>()>"
    "<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeField: void <init>()>";
    "<org.joda.time.DateTimeField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<java.util.HashMap: void <init>(int)>"
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: void <init>(int)>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>"
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "<org.joda.time.DurationField: void <init>()>"
    "<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<org.joda.time.DurationField: void <init>()>";
    "<org.joda.time.DurationField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: void <init>(int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeField: void <init>()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>"
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>";
    "<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"
    "<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<org.joda.time.DurationField: void <init>()>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>"
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.BaseDateTimeField: boolean isSupported()>"
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "<java.util.concurrent.atomic.AtomicReference: void <init>()>"
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>"
    "<org.joda.time.DateTimeUtils: void <clinit>()>"->"<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>";
    "<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.InternalError: void <init>()>"
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.InternalError: void <init>()>";
    "<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.InternalError: void <init>()>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>"
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>"
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>"
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"
    "<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<java.util.Locale: java.util.Locale getDefault()>"
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Locale: void <clinit>()>"
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"
    "<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>"
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.UnsupportedOperationException: void <init>()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"
    "<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String toString()>"
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String concat(java.lang.String)>"
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "<java.lang.String: java.lang.String substring(int)>"
    "<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<java.lang.StringBuffer: void <init>()>"
    "<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: void <init>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.TimeZone: java.lang.String getID()>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.util.TimeZone: java.lang.String getID()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.String: boolean startsWith(java.lang.String)>"
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <init>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<java.util.HashMap: boolean containsKey(java.lang.Object)>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.field.BaseDurationField: boolean isSupported()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>"
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)>"
    "<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)>"->"<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.PreciseDurationField: boolean isPrecise()>"
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationField: long getUnitMillis()>"
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYear()>"
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerMonth()>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerMonth()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>"
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <init>(java.lang.String)>"
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>"->"<org.joda.time.DurationFieldType: void <init>(java.lang.String)>";
    "<org.joda.time.DurationFieldType: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DurationFieldType: void <clinit>()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>"
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <init>(java.lang.String)>"
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>"->"<org.joda.time.DateTimeFieldType: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeFieldType: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "<org.joda.time.field.MillisDurationField: void <init>()>"
    "<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<org.joda.time.field.MillisDurationField: void <init>()>";
    "<org.joda.time.field.MillisDurationField: void <init>()>"->"<org.joda.time.DurationField: void <init>()>";
    "<org.joda.time.UTCDateTimeZone: void <init>()>"
    "<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<org.joda.time.UTCDateTimeZone: void <init>()>";
    "<org.joda.time.UTCDateTimeZone: void <init>()>"->"<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>"
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>"
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>"->"<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "<org.joda.time.field.MillisDurationField: boolean isPrecise()>"
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "<org.joda.time.field.MillisDurationField: long getUnitMillis()>"
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>"
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"
    "<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.base.AbstractDateTime: void <init>()>"
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.AbstractDateTime: void <init>()>";
    "<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>"
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: void adjustForMinMax()>";
    "<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: void <init>()>"
    "<org.joda.time.base.AbstractDateTime: void <init>()>"->"<org.joda.time.base.AbstractInstant: void <init>()>";
    "<org.joda.time.base.AbstractInstant: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: void <init>()>";
    "<java.lang.ThreadLocal: java.lang.Object get()>"
    "<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.ThreadLocal: java.lang.Object get()>";
    "<java.lang.InternalError: void <init>(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: int size()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<java.util.TreeMap: java.util.Collection values()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Collection values()>";
    "<java.util.TreeMap$Values: java.util.Iterator iterator()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Values: java.util.Iterator iterator()>";
    "<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<java.util.TreeMap$ValueIterator: java.lang.Object next()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "<java.util.TreeMap: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: void <init>(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<java.util.TreeMap: java.util.Set entrySet()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<java.util.TreeMap$EntryIterator: java.lang.Object next()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.lang.Object next()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.lang.Object next()>";
    "<java.io.DataOutputStream: void writeShort(int)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.io.DataOutputStream: void writeUTF(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.util.TreeMap: void putAll(java.util.Map)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void putAll(java.util.Map)>";
    "<java.util.TreeMap: void <init>(java.util.Comparator)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<java.io.FilterOutputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FilterOutputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FilterOutputStream: void close()>";
    "<java.io.DataOutputStream: void <init>(java.io.OutputStream)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
    "<java.io.FileOutputStream: void <init>(java.io.File)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "<java.io.File: java.io.File getParentFile()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.io.File getParentFile()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.io.File getParentFile()>";
    "<java.io.File: boolean mkdirs()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean mkdirs()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean exists()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BasePeriod: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.base.BasePeriod: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.Period: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.text.DateFormatSymbols: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.DateTimeUtils: long currentTimeMillis()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BasePeriod: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BasePeriod: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BasePeriod: void <clinit>()>"->"<org.joda.time.base.BasePeriod: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"->"<org.joda.time.Period: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"->"<org.joda.time.base.BasePeriod: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"->"<org.joda.time.Period: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Period: void <clinit>()>"->"<org.joda.time.base.BasePeriod: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int get(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"
    "<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>";
    "<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.System: long currentTimeMillis()>"
    "<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.System: long currentTimeMillis()>";
    "<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Period: void <init>()>"
    "<org.joda.time.Period: void <clinit>()>"->"<org.joda.time.Period: void <init>()>";
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "<org.joda.time.Period: void <init>()>"->"<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>";
    "<org.joda.time.base.AbstractPeriod: void <init>()>"
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.base.AbstractPeriod: void <init>()>";
    "<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"
    "<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>";
    "<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"
    "<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>";
    "<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"
    "<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>"
    "<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.base.AbstractPeriod: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.base.AbstractPeriod: int size()>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.AbstractPeriod: int size()>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BasePeriod$1: void <init>()>"
    "<org.joda.time.base.BasePeriod: void <clinit>()>"->"<org.joda.time.base.BasePeriod$1: void <init>()>";
    "<org.joda.time.base.BasePeriod$1: void <init>()>"->"<org.joda.time.base.AbstractPeriod: void <init>()>";
    "<org.joda.time.PeriodType: void <clinit>()>"->"<java.util.HashMap: void <init>(int)>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.Period: int getYears()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.Period: int getYears()>";
    "<org.joda.time.Period: int getMonths()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.Period: int getMonths()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.Period: int getMonths()>";
    "<org.joda.time.Period: int getYears()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.Period: int getYears()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Period: int getMonths()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.Period: int getMonths()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Period: int getMonths()>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Period: int getYears()>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.base.AbstractPeriod: void <init>()>";
    "<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<java.text.DateFormatSymbols: void <init>(java.util.Locale)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: void <init>(java.util.Locale)>";
    "<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <init>(java.util.Collection)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>";
    "<org.joda.time.UTCDateTimeZone: int getOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.UTCDateTimeZone: long nextTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.UTCDateTimeZone: long previousTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: long previousTransition(long)>";
    "<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: int binarySearch(long[],long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"
    "<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>"
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"
    "<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"
    "<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"
    "<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>";
    "<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: int length()>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <init>(int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.util.ArrayList: void <init>(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<java.io.BufferedReader: void <init>(java.io.Reader)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void <init>(java.io.Reader)>";
    "<java.io.BufferedReader: void close()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void close()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void close()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: boolean isWhitespace(char)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Character: boolean isWhitespace(char)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.io.FileOutputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: java.io.File getParentFile()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: java.io.File getParentFile()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: boolean mkdirs()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: boolean exists()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: boolean equals(int[],int[])>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(int[],int[])>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(int[],int[])>";
    "<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>";
    "<java.util.Arrays: boolean equals(long[],long[])>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(long[],long[])>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.DataOutputStream: void flush()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.io.DataOutputStream: void flush()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.DataOutputStream: void writeByte(int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<java.io.DataOutputStream: void writeInt(int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<java.io.DataOutputStream: void writeLong(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeLong(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>";
    "<java.util.HashSet: void <clinit>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<java.util.HashSet: boolean add(java.lang.Object)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<java.util.HashSet: int size()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: int size()>";
    "<java.util.HashSet: java.util.Iterator iterator()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<java.util.HashSet: void <init>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.io.DataOutputStream: void writeBoolean(boolean)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeBoolean(boolean)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeBoolean(boolean)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>";
    "<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>";
    "<java.util.StringTokenizer: java.lang.String nextToken()>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: int parseInt(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"->"<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>"
    "<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>"
    "<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>"
    "<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>"
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>"->"<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>"
    "<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>";
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>"->"<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.base.BaseDateTime: long getMillis()>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.MutableDateTime: void setMillis(long)>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.MutableDateTime: void setMillis(long)>";
    "<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>"
    "<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void setMillis(long)>"
    "<org.joda.time.MutableDateTime: void setMillis(long)>"->"<org.joda.time.base.BaseDateTime: void setMillis(long)>";
    "<org.joda.time.base.BaseDateTime: void setMillis(long)>"->"<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>"
    "<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: long getLocalMillis()>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"
    "<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ArithmeticException: void <init>(java.lang.String)>"
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"
    "<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>";
    "<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: void <clinit>()>"
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReferenceArray: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.String: void <init>(java.lang.String)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: void <init>(java.lang.String)>";
    "<org.joda.time.DateTime: void <init>()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.DateTime: void <init>()>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.base.AbstractDateTime: int getYear()>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"
    "<org.joda.time.DateTime: void <init>()>"->"<org.joda.time.base.BaseDateTime: void <init>()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: void <init>()>"->"<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.DateTime: void <init>()>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.base.AbstractDateTime: int getWeekyear()>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<java.lang.Math: int max(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: int max(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: int max(int,int)>";
    "<java.util.Collections: void sort(java.util.List)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections: void sort(java.util.List)>";
    "<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"
    "<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>";
    "<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>";
    "<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"->"<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.ArrayList: java.util.Iterator iterator()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<java.util.ArrayList$Itr: boolean hasNext()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "<java.util.ArrayList$Itr: java.lang.Object next()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>";
    "<java.lang.Enum: void <init>(java.lang.String,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: int size()>"
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: int size()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Instant: long getMillis()>"
    "<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>"
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>";
    "<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Instant: void <init>(long)>"
    "<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<org.joda.time.Instant: void <init>(long)>";
    "<org.joda.time.Instant: void <init>(long)>"->"<org.joda.time.base.AbstractInstant: void <init>()>";
    "<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"
    "<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.base.BaseLocal: void <init>()>"
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseLocal: void <init>()>";
    "<org.joda.time.base.AbstractPartial: void <init>()>"
    "<org.joda.time.base.BaseLocal: void <init>()>"->"<org.joda.time.base.AbstractPartial: void <init>()>";
    "<org.joda.time.base.AbstractPartial: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.field.UnsupportedDurationField: long add(long,int)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"
    "<org.joda.time.field.UnsupportedDurationField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"
    "<org.joda.time.LocalDate: void <init>(int,int,int)>"->"<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<org.joda.time.DateTimeFieldType: java.lang.String getName()>"
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: int getMinYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.chrono.GregorianChronology: int getMaxYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>"
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"
    "<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>"
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>";
    "<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.chrono.GregorianChronology: long calculateFirstDayOfYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<org.joda.time.chrono.GregorianChronology: long calculateFirstDayOfYearMillis(int)>";
    "<org.joda.time.chrono.GregorianChronology: long calculateFirstDayOfYearMillis(int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getMaxMonth()>"
    "<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>"->"<org.joda.time.chrono.BasicChronology: int getMaxMonth()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseLocal: void <init>()>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: int getMonthOfYear()>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: int getDayOfMonth()>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.util.StringTokenizer: boolean hasMoreTokens()>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.lang.String: int indexOf(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int length()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.StringTokenizer: int countTokens()>"
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: int countTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: int countTokens()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>";
    "<java.io.BufferedReader: java.lang.String readLine()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<java.lang.String: java.lang.String trim()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: java.lang.String trim()>";
    "<java.lang.String: int indexOf(int)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: int indexOf(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: int length()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"
    "<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>";
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>"
    "<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeField: void <init>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>"
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>"
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.UTCDateTimeZone: long previousTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>";
    "<java.lang.Object: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"
    "<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.DateTimeField: long setExtended(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int indexOf(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int length()>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>"
    "<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "<org.joda.time.DurationFieldType: java.lang.String getName()>"
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>"->"<org.joda.time.DurationFieldType: java.lang.String getName()>";
    "<org.joda.time.DurationFieldType: java.lang.String toString()>"
    "<org.joda.time.DurationFieldType: java.lang.String toString()>"->"<org.joda.time.DurationFieldType: java.lang.String getName()>";
    "<org.joda.time.DateTimeFieldType: java.lang.String toString()>"
    "<org.joda.time.DateTimeFieldType: java.lang.String toString()>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.DateTimeZone: java.lang.String toString()>"
    "<org.joda.time.DateTimeZone: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.base.AbstractDateTime: java.lang.String toString()>"
    "<org.joda.time.base.AbstractInstant: java.lang.String toString()>"
    "<org.joda.time.base.AbstractDateTime: java.lang.String toString()>"->"<org.joda.time.base.AbstractInstant: java.lang.String toString()>";
    "<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"
    "<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.UTCDateTimeZone: int hashCode()>"
    "<org.joda.time.UTCDateTimeZone: int hashCode()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<java.lang.String: int hashCode()>"
    "<org.joda.time.UTCDateTimeZone: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<java.lang.Object: int hashCode()>"
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<org.joda.time.chrono.GregorianChronology: int hashCode()>"
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"
    "<org.joda.time.chrono.GregorianChronology: int hashCode()>"->"<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.DateTimeZone: int hashCode()>"
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.tz.CachedDateTimeZone: int hashCode()>"
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.tz.CachedDateTimeZone: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.DateTimeZone: int hashCode()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.DateTimeZone: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<java.lang.Class: java.lang.String getName()>"
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<java.lang.Class: java.lang.String getName()>";
    "<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>"->"<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.UnsupportedDurationField: int hashCode()>"
    "<org.joda.time.field.UnsupportedDurationField: int hashCode()>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDurationField: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Object initialValue()>"
    "<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"
    "<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Object initialValue()>"->"<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>";
    "<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: boolean booleanValue()>"
    "<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.Boolean: boolean booleanValue()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean exists()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean mkdirs()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean isDirectory()>";
    "<org.joda.time.field.LenientDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<java.util.ArrayList$Itr: void remove()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: void remove()>";
    "<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>"
    "<org.joda.time.Period: int getYears()>"->"<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>";
    "<org.joda.time.base.BasePeriod: int getValue(int)>"
    "<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.Period: int getMonths()>"->"<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>";
    "<org.joda.time.PeriodType: int size()>"
    "<org.joda.time.base.AbstractPeriod: int size()>"->"<org.joda.time.PeriodType: int size()>";
    "<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.tz.FixedDateTimeZone: boolean isFixed()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.tz.FixedDateTimeZone: boolean isFixed()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>";
    "<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>";
    "<org.joda.time.UTCDateTimeZone: boolean isFixed()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.UTCDateTimeZone: boolean isFixed()>";
    "<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.chrono.BasicChronology: int getMaxMonth()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax()>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>"
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.field.MillisDurationField: boolean isSupported()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>"
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>"
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>";
    "<org.joda.time.field.UnsupportedDurationField: int compareTo(org.joda.time.DurationField)>"
    "<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: int compareTo(org.joda.time.DurationField)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: int size()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>";
    "<java.io.File: java.lang.String getName()>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.lang.String getName()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"
    "<java.lang.Object: boolean equals(java.lang.Object)>"
    "<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.BaseDurationField: java.lang.String getName()>"
    "<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<org.joda.time.field.BaseDurationField: java.lang.String getName()>";
    "<org.joda.time.field.BaseDurationField: java.lang.String getName()>"->"<org.joda.time.DurationFieldType: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.DateTimeParser getUnderlying()>"
    "<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.DateTimeParser getUnderlying()>";
    "<java.lang.Long: long longValue()>"
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: long longValue()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.util.ArrayList: void <init>(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: int indexOf(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"
    "<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.lang.Short: short shortValue()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: short shortValue()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: short shortValue()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>"
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.field.PreciseDurationField: int hashCode()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.field.PreciseDurationField: int hashCode()>";
    "<org.joda.time.field.MillisDurationField: int hashCode()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.field.MillisDurationField: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.field.UnsupportedDurationField: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.field.ScaledDurationField: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.field.MillisDurationField: int hashCode()>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDurationField: int hashCode()>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.PreciseDurationField: int hashCode()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "<sun.util.LocaleServiceProviderPool: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.util.LocaleServiceProviderPool: void <clinit>()>";
    "<java.util.Currency: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.util.Currency: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>"
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>";
    "<java.lang.Enum: boolean equals(java.lang.Object)>"
    "<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<java.lang.Enum: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.System: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Class: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.util.LocaleServiceProviderPool: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.util.Currency: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: void <init>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<org.joda.time.tz.DefaultNameProvider: void <init>()>";
    "<org.joda.time.tz.DefaultNameProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"
    "<org.joda.time.tz.DefaultNameProvider: void <init>()>"->"<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "<org.joda.time.tz.DefaultNameProvider: void <init>()>"->"<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.util.HashMap: void <init>(int)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>"
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Class: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.text.DateFormatSymbols: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.text.DateFormatSymbols: void <init>(java.util.Locale)>";
    "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"
    "<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>"
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<java.lang.StringBuffer: void <init>(int)>"
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.PreciseDurationField: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.MillisDurationField: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.UnsupportedDurationField: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.ScaledDurationField: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>";
    "<java.lang.Math: int min(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.Collections: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.LinkedHashMap: void <init>()>"
    "<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.LinkedHashMap: void <init>()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<java.lang.String: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>";
    "<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>";
    "<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"
    "<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>";
    "<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>";
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"->"<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"
    "<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>"->"<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>";
    "<org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>";
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.field.PreciseDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.OffsetDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>"
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>"->"<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>"->"<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>"
    "<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>";
    "<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYearDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYearDividedByTwo()>";
    "<org.joda.time.chrono.GregorianChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.GregorianChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"
    "<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>"
    "<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"
    "<org.joda.time.field.OffsetDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.PreciseDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: void <init>()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(int)>"
    "<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getEras()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getEras()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getMonths()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getMonths()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: java.lang.String intern()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<java.util.Locale: java.lang.String getLanguage()>"
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.Locale: java.lang.String getLanguage()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>"
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<java.lang.Math: int abs(int)>"
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Math: int abs(int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>"
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Math: long abs(long)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Math: long abs(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>"
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: int abs(int)>";
    "<java.lang.Math: float signum(float)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: float signum(float)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: float signum(float)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.UnsupportedDurationField: long add(long,long)>"
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDurationField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.PreciseDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.field.MillisDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"
    "<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"
    "<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>"
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValueForSet(long,int)>"
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValueForSet(long,int)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMaxForSet(long,int)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMaxForSet(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMaxForSet(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"
    "<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>"
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>"
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.PreciseDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.field.MillisDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.PreciseDurationField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationField: long add(long,int)>"->"<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "<org.joda.time.field.MillisDurationField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: long add(long,int)>"->"<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>"
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>"
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "<java.lang.Thread: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>"
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"
    "<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>"->"<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.HashMap$HashIterator: boolean hasNext()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "<java.util.HashMap$KeyIterator: java.lang.Object next()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>"
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"
    "<org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<java.util.TreeMap$Entry: java.lang.Object getKey()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "<java.util.TreeMap$Entry: java.lang.Object getValue()>"
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "<org.joda.time.MutablePeriod: java.lang.Object clone()>"
    "<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableInterval: java.lang.Object clone()>"
    "<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: java.lang.Object clone()>"
    "<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<java.util.LinkedList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedList: int size()>";
    "<java.util.LinkedList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<org.joda.time.PeriodType: java.lang.String toString()>"
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"
    "<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"
    "<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "<org.joda.time.Weeks: java.lang.String toString()>"
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.Days: java.lang.String toString()>"
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.Hours: java.lang.String toString()>"
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.Minutes: java.lang.String toString()>"
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.Seconds: java.lang.String toString()>"
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.Years: java.lang.String toString()>"
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.Months: java.lang.String toString()>"
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDateTime: java.lang.String toString()>"
    "<org.joda.time.LocalDateTime: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDateTime: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "<org.joda.time.LocalDate: java.lang.String toString()>"
    "<org.joda.time.LocalDate: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.LocalTime: java.lang.String toString()>"
    "<org.joda.time.LocalTime: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"
    "<org.joda.time.LocalTime: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>";
    "<org.joda.time.YearMonthDay: java.lang.String toString()>"
    "<org.joda.time.YearMonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "<org.joda.time.TimeOfDay: java.lang.String toString()>"
    "<org.joda.time.TimeOfDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"
    "<org.joda.time.TimeOfDay: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>";
    "<org.joda.time.YearMonth: java.lang.String toString()>"
    "<org.joda.time.YearMonth: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"
    "<org.joda.time.YearMonth: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>"
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Long: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"
    "<org.joda.time.YearMonthDay: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<java.lang.StringBuilder: java.lang.Appendable append(char)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>"
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToText(int)>"
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToText(int)>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String eraValueToText(int)>"
    "<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String eraValueToText(int)>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String halfdayValueToText(int)>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String halfdayValueToText(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>"
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>";
    "<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToShortText(int)>"
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToShortText(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Long: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.LocalDate: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.LocalDateTime: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.HashSet: boolean remove(java.lang.Object)>"
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"
    "<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<org.joda.time.Instant: void <init>(long)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: int size()>";
    "<java.util.HashSet: boolean contains(java.lang.Object)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: int size()>";
    "<java.util.HashSet: void <init>(java.util.Collection)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: void <init>(java.util.Collection)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: boolean retainAll(java.util.Collection)>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.ArrayList: boolean retainAll(java.util.Collection)>";
    "<org.joda.time.YearMonth: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.TimeOfDay: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.LocalTime: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.IllegalStateException: void <init>(java.lang.String)>"
    "<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>"
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: int size()>";
    "<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<java.util.Collections: void reverse(java.util.List)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.Collections: void reverse(java.util.List)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.Collections: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<java.util.TreeSet: boolean add(java.lang.Object)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "<java.util.TreeSet: void <init>(java.util.Comparator)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: void <init>(java.util.Comparator)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"
    "<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clear()>"
    "<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"->"<org.joda.time.format.PeriodFormatterBuilder: void clear()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.ArrayList: void clear()>"
    "<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void clear()>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"
    "<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<org.joda.time.format.PeriodFormatter: void checkPrinter()>"
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatter: void checkPrinter()>";
    "<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.CopticChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.CopticChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(int)>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>"->"<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>"->"<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>"->"<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>"->"<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.JulianChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.JulianChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>"
    "<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ISOChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ISOChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>"
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>"
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ISOChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>"
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>";
    "<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>";
    "<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>";
    "<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDate: int getYear()>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.LocalDate: int getYear()>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.Instant: org.joda.time.Instant toInstant()>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.Instant: org.joda.time.Instant toInstant()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: int length()>"
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>"
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: void setLength(int)>"
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void setLength(int)>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>()>";
    "<org.joda.time.base.BaseDuration: long getMillis()>"
    "<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<org.joda.time.base.BaseDuration: long getMillis()>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.BaseInterval: long getStartMillis()>"
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "<org.joda.time.base.BaseInterval: long getEndMillis()>"
    "<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: void <init>()>";
    "<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.Partial: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: void <clinit>()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>"
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.LocalTime: void <clinit>()>"
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int)>"
    "<org.joda.time.LocalTime: void <clinit>()>"->"<org.joda.time.LocalTime: void <init>(int,int,int,int)>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"
    "<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseLocal: void <init>()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.Partial: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.LocalDateTime: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.LocalDate: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.LocalTime: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.YearMonthDay: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.TimeOfDay: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.YearMonth: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.MonthDay: int size()>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.YearMonthDay: void <clinit>()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.TimeOfDay: void <clinit>()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"
    "<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.YearMonth: void <clinit>()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"
    "<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.MonthDay: void <clinit>()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.YearMonthDay: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.TimeOfDay: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.TimeOfDay: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.TimeOfDay: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<org.joda.time.YearMonth: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.MonthDay: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.MonthDay: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>"
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>";
    "<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>"->"<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "<org.joda.time.MonthDay: void <clinit>()>"->"<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>"
    "<org.joda.time.TimeOfDay: void <clinit>()>"->"<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>";
    "<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>"
    "<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>"->"<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"
    "<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.base.AbstractPartial: void <init>()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.Partial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.Partial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.base.BasePartial: int getValue(int)>"
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: long getLocalMillis()>"
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime: long getLocalMillis()>"
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "<org.joda.time.Partial: int getValue(int)>"
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.LocalDate: int getValue(int)>"
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.LocalTime: int getValue(int)>"
    "<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: long getLocalMillis()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: long getLocalMillis()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: long getLocalMillis()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: int getValue(int)>"->"<org.joda.time.LocalTime: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.LocalDate: long getLocalMillis()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime: int getValue(int)>"->"<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"
    "<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>"
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>";
    "<org.joda.time.YearMonthDay$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"<org.joda.time.YearMonthDay$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.TimeOfDay$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"<org.joda.time.TimeOfDay$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.Partial$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"<org.joda.time.Partial$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.YearMonth$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"<org.joda.time.YearMonth$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.MonthDay$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"<org.joda.time.MonthDay$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>"
    "<org.joda.time.Months: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Years: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Seconds: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Minutes: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Hours: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Days: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Weeks: java.lang.String toString()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Partial: java.lang.String toString()>"
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"
    "<org.joda.time.Partial: java.lang.String toString()>"->"<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"
    "<org.joda.time.Partial: java.lang.String toString()>"->"<org.joda.time.Partial: java.lang.String toStringList()>";
    "<org.joda.time.Partial: java.lang.String toString()>"->"<org.joda.time.Partial: java.lang.String toStringList()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>";
    "<java.util.Arrays: java.util.List asList(java.lang.Object[])>"
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: void <clinit>()>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: void <init>(int)>";
    "<org.joda.time.Partial: java.lang.String toStringList()>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>";
    "<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.PeriodType: java.lang.String getName()>"
    "<org.joda.time.PeriodType: java.lang.String toString()>"->"<org.joda.time.PeriodType: java.lang.String getName()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"
    "<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>";
    "<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>";
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYear()>"
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.JulianChronology: long getAverageMillisPerMonth()>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.chrono.JulianChronology: long getAverageMillisPerMonth()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>"
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYearDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYearDividedByTwo()>";
    "<org.joda.time.chrono.JulianChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.JulianChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.JulianChronology: long calculateFirstDayOfYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<org.joda.time.chrono.JulianChronology: long calculateFirstDayOfYearMillis(int)>";
    "<org.joda.time.chrono.JulianChronology: long calculateFirstDayOfYearMillis(int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.CopticChronology: int hashCode()>"
    "<org.joda.time.chrono.CopticChronology: int hashCode()>"->"<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "<org.joda.time.chrono.EthiopicChronology: int hashCode()>"
    "<org.joda.time.chrono.EthiopicChronology: int hashCode()>"->"<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "<org.joda.time.chrono.JulianChronology: int hashCode()>"
    "<org.joda.time.chrono.JulianChronology: int hashCode()>"->"<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "<org.joda.time.chrono.IslamicChronology: int hashCode()>"
    "<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>"
    "<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.base.AbstractDuration: int hashCode()>"
    "<org.joda.time.base.AbstractDuration: int hashCode()>"->"<org.joda.time.base.BaseDuration: long getMillis()>";
    "<org.joda.time.base.AbstractInterval: int hashCode()>"
    "<org.joda.time.base.AbstractInterval: int hashCode()>"->"<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "<org.joda.time.base.AbstractInterval: int hashCode()>"->"<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "<org.joda.time.base.AbstractInterval: int hashCode()>"->"<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate: int hashCode()>"
    "<org.joda.time.base.AbstractPartial: int hashCode()>"
    "<org.joda.time.LocalDate: int hashCode()>"->"<org.joda.time.base.AbstractPartial: int hashCode()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"
    "<org.joda.time.YearMonthDay$Property: int get()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.YearMonthDay$Property: int get()>";
    "<org.joda.time.TimeOfDay$Property: int get()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.TimeOfDay$Property: int get()>";
    "<org.joda.time.Partial$Property: int get()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.Partial$Property: int get()>";
    "<org.joda.time.YearMonth$Property: int get()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.YearMonth$Property: int get()>";
    "<org.joda.time.MonthDay$Property: int get()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.MonthDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.YearMonthDay$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.TimeOfDay$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.Partial$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.YearMonth$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.MonthDay$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "<org.joda.time.base.AbstractPeriod: int hashCode()>"
    "<org.joda.time.base.AbstractPeriod: int hashCode()>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.base.BasePeriod$1: int getValue(int)>"
    "<org.joda.time.base.AbstractPeriod: int hashCode()>"->"<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: int hashCode()>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: int hashCode()>"->"<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPeriod: int hashCode()>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>"
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.DateTime$Property: long getMillis()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.DateTime$Property: long getMillis()>";
    "<org.joda.time.LocalDateTime$Property: long getMillis()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.LocalDateTime$Property: long getMillis()>";
    "<org.joda.time.LocalTime$Property: long getMillis()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.LocalTime$Property: long getMillis()>";
    "<org.joda.time.MutableDateTime$Property: long getMillis()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.MutableDateTime$Property: long getMillis()>";
    "<org.joda.time.LocalDate$Property: long getMillis()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.LocalDate$Property: long getMillis()>";
    "<org.joda.time.DateMidnight$Property: long getMillis()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.DateMidnight$Property: long getMillis()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"
    "<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType time()>";
    "<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.base.AbstractPeriod: int size()>"->"<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<java.nio.CharBuffer: int length()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<java.lang.StringBuffer: char charAt(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<java.nio.CharBuffer: char charAt(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<java.nio.CharBuffer: java.lang.String toString()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.base.AbstractDuration: int compareTo(java.lang.Object)>"
    "<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>"
    "<org.joda.time.base.AbstractDuration: int compareTo(java.lang.Object)>"->"<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>";
    "<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>"->"<org.joda.time.base.BaseDuration: long getMillis()>";
    "<org.joda.time.LocalTime: int compareTo(java.lang.Object)>"
    "<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"
    "<org.joda.time.LocalTime: int compareTo(java.lang.Object)>"->"<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"
    "<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassCastException: void <init>(java.lang.String)>"
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.ClassCastException: void <init>(java.lang.String)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.ClassCastException: void <init>(java.lang.String)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.LocalDate: int compareTo(java.lang.Object)>"
    "<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"
    "<org.joda.time.LocalDate: int compareTo(java.lang.Object)>"->"<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.LocalDateTime: int compareTo(java.lang.Object)>"
    "<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"
    "<org.joda.time.LocalDateTime: int compareTo(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(java.lang.Object)>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.ClassCastException: void <init>(java.lang.String)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"
    "<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>";
    "<org.joda.time.base.AbstractInstant: int compareTo(java.lang.Object)>"
    "<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"
    "<org.joda.time.base.AbstractInstant: int compareTo(java.lang.Object)>"->"<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>";
    "<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.field.DelegatedDurationField: int compareTo(java.lang.Object)>"
    "<org.joda.time.field.DelegatedDurationField: int compareTo(org.joda.time.DurationField)>"
    "<org.joda.time.field.DelegatedDurationField: int compareTo(java.lang.Object)>"->"<org.joda.time.field.DelegatedDurationField: int compareTo(org.joda.time.DurationField)>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"
    "<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>";
    "<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>"
    "<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseDuration: long getMillis()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"
    "<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"
    "<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"
    "<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"
    "<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"
    "<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>";
    "<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"
    "<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType days()>";
    "<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"
    "<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>";
    "<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"
    "<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>";
    "<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"
    "<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>";
    "<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"
    "<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType years()>";
    "<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"
    "<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"<org.joda.time.PeriodType: org.joda.time.PeriodType months()>";
    "<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.PeriodType: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>"
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>"->"<org.joda.time.base.BaseDuration: long getMillis()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.GJCacheKey: int hashCode()>"
    "<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"<org.joda.time.DateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"<org.joda.time.base.AbstractInstant: int hashCode()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<sun.security.ec.ECKeyFactory: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.security.ec.ECKeyFactory: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.security.ec.ECKeyFactory: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>"
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.util.ArrayList: java.util.List subList(int,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.util.List subList(int,int)>";
    "<java.util.ArrayList$SubList: int size()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.ArrayList$SubList: java.lang.Object get(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<java.util.ArrayList$SubList: java.util.List subList(int,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.util.List subList(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.util.List subList(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: void clear()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.util.List subList(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.AbstractList: void clear()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: void clear()>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<org.joda.time.Partial: java.lang.String toString()>"->"<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseDuration: long getMillis()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay$Property: int get()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int size()>"
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int size()>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"
    "<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay: int size()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePartial: int getValue(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"
    "<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>"
    "<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>";
    "<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>";
    "<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>"
    "<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>";
    "<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.JulianChronology: int getMaxYear()>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.JulianChronology: int getMinYear()>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.field.SkipDateTimeField: int get(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.SkipDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: char toLowerCase(char)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toLowerCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toLowerCase(char)>";
    "<java.lang.Character: char toUpperCase(char)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toUpperCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toUpperCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toLowerCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toLowerCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toUpperCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toUpperCase(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.MutableDateTime$Property: long getMillis()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.MutableDateTime$Property: long getMillis()>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>"
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>"
    "<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: void <init>(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>"
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Locale: java.lang.String getLanguage()>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"->"<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"->"<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.String: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuilder: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.nio.CharBuffer: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.MutableDateTime$Property: long getMillis()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>"
    "<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxTextLength()>"
    "<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxTextLength()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int getEraMaxTextLength()>"
    "<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int getEraMaxTextLength()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int getHalfdayMaxTextLength()>"
    "<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJLocaleSymbols: int getHalfdayMaxTextLength()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.String: int length()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getName()>"
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getName()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>";
    "<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getName()>"->"<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>";
    "<org.joda.time.chrono.IslamicChronology: int getMinYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.chrono.EthiopicChronology: int getMinYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.CopticChronology: int getMinYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.IslamicChronology: int getMaxYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.CopticChronology: int getMaxYear()>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>"
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>"
    "<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>"
    "<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>";
    "<org.joda.time.chrono.EthiopicChronology: long calculateFirstDayOfYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<org.joda.time.chrono.EthiopicChronology: long calculateFirstDayOfYearMillis(int)>";
    "<org.joda.time.chrono.CopticChronology: long calculateFirstDayOfYearMillis(int)>"
    "<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<org.joda.time.chrono.CopticChronology: long calculateFirstDayOfYearMillis(int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: long calculateFirstDayOfYearMillis(int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.EthiopicChronology: long calculateFirstDayOfYearMillis(int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getMaxMonth()>"
    "<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMaxMonth()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"->"<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>";
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"->"<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>";
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"->"<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"->"<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>"
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>"
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.AbstractDateTime: void <init>()>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.base.BaseDateTime: void adjustForMinMax()>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"
    "<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>"
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>"
    "<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>";
    "<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>";
    "<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>";
    "<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: boolean isBefore(long)>"
    "<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"<org.joda.time.base.AbstractInstant: boolean isBefore(long)>";
    "<org.joda.time.base.AbstractInstant: boolean isBefore(long)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.MutableDateTime: void setMillis(long)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"
    "<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "<org.joda.time.chrono.GJChronology: int hashCode()>"->"<org.joda.time.base.AbstractInstant: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LenientChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.StrictChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.JulianChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.chrono.CopticChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LenientChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.StrictChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.JulianChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<org.joda.time.chrono.CopticChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.GJChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LenientChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.StrictChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.JulianChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<org.joda.time.chrono.CopticChronology: java.lang.String toString()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"
    "<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>"
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"
    "<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"->"<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>";
    "<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <init>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.StrictDateTimeField: boolean isLenient()>"
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>"
    "<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerMonth()>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerMonth()>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerMonth()>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerMonth()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMaxMonth()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYear()>"
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYear()>"
    "<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYear()>";
    "<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>"
    "<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<org.joda.time.base.AbstractInstant: int hashCode()>";
    "<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<org.joda.time.base.AbstractDateTime: java.lang.String toString()>";
    "<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>"
    "<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<org.joda.time.DateTimeZone: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: int size()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<java.util.Locale: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Locale: java.lang.Object clone()>";
    "<java.net.HttpCookie: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<java.util.Date: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Date: java.lang.Object clone()>";
    "<java.text.DecimalFormatSymbols: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<java.util.jar.Manifest: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<java.util.jar.Attributes: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<sun.security.krb5.EncryptionKey: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<java.util.zip.ZipEntry: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<java.util.Hashtable$Entry: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<java.text.DateFormatSymbols: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<java.text.StringCharacterIterator: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<sun.security.krb5.Realm: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<sun.security.krb5.internal.PAData: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<java.util.BitSet: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "<java.text.DigitList: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<sun.text.CompactByteArray: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<sun.net.www.MimeEntry: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<sun.security.util.BitArray: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<sun.security.krb5.internal.Ticket: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<sun.net.ProgressSource: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<sun.security.krb5.EncryptedData: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<javax.crypto.Mac: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<javax.naming.CompositeName: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<javax.naming.Reference: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<sun.text.IntHashtable: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<java.lang.Enum: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<java.util.IdentityHashMap: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "<java.util.HashMap: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<java.util.AbstractMap: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<java.util.TreeMap: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<java.util.ArrayDeque: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "<java.text.RuleBasedBreakIterator: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<sun.util.calendar.ZoneInfo: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<java.util.SimpleTimeZone: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<java.util.GregorianCalendar: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<java.util.JapaneseImperialCalendar: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<java.util.Hashtable: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<java.text.MessageFormat: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<java.text.RuleBasedCollator: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<java.security.SignatureSpi: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<java.util.ArrayList: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<java.util.Vector: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Vector: java.lang.Object clone()>";
    "<java.util.HashSet: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<java.util.TreeSet: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<sun.util.calendar.CalendarDate: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<java.security.MessageDigest$Delegate: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<sun.security.provider.MD4: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<java.text.SimpleDateFormat: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<java.text.DecimalFormat: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<java.text.ChoiceFormat: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<java.security.Signature$Delegate: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "<java.util.LinkedList: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<java.util.EnumSet: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "<java.util.JumboEnumSet: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>"
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "<java.util.AbstractMap$1$1: boolean hasNext()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "<java.util.AbstractMap$1$1: java.lang.Object next()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>"
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<java.util.Collections$SynchronizedCollection: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "<java.util.Collections$CheckedCollection: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.Collections$CopiesList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.Collections$SingletonList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SingletonList: int size()>";
    "<java.util.Collections$EmptyList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyList: int size()>";
    "<java.util.Vector: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector: int size()>";
    "<java.util.Arrays$ArrayList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayList: int size()>";
    "<java.util.SubList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.SubList: int size()>";
    "<sun.security.jca.ProviderList$3: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "<sun.security.jca.ProviderList$ServiceList: int size()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "<java.util.Collections$SynchronizedList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<java.util.Collections$CopiesList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "<java.util.Collections$SingletonList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "<java.util.Collections$EmptyList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "<java.util.Vector: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "<java.util.Arrays$ArrayList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "<java.util.SubList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.SubList: java.lang.Object get(int)>";
    "<sun.security.jca.ProviderList$3: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$3: java.lang.Object get(int)>";
    "<sun.security.jca.ProviderList$ServiceList: java.lang.Object get(int)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$ServiceList: java.lang.Object get(int)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>";
    "<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "<java.security.Provider: java.lang.Object get(java.lang.Object)>"
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DelegatedDurationField: boolean isSupported()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>"
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>"
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.StrictDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"
    "<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.SkipUndoDateTimeField: int get(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.field.SkipUndoDateTimeField: int get(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>"
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"
    "<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>"
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>"
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.IslamicChronology: int getYear(long)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.IslamicChronology: int getYear(long)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: int getYear(long)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYearDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYearDividedByTwo()>";
    "<org.joda.time.chrono.IslamicChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.IslamicChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYearDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYearDividedByTwo()>";
    "<org.joda.time.chrono.EthiopicChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.EthiopicChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.CopticChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"<org.joda.time.chrono.CopticChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"
    "<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long)>"
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.field.DelegatedDurationField: int hashCode()>"
    "<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<org.joda.time.field.DelegatedDurationField: int hashCode()>";
    "<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getYear()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getYear()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getMonthOfYear()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getValue(int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.LocalDate: int getDayOfMonth()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: int compareTo(java.lang.Object)>";
    "<sun.security.provider.MD4: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.security.provider.MD4: void <clinit>()>";
    "<sun.security.provider.DigestBase: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.security.provider.DigestBase: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.security.provider.MD4: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.security.provider.DigestBase: void <clinit>()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.String: int length()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.MutableDateTime: void setMillis(long)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat: void <clinit>()>"
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ResourceBundle: void <clinit>()>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.util.ResourceBundle: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "<java.util.ResourceBundle$1: java.util.Enumeration getKeys()>"
    "<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.util.ResourceBundle$1: java.util.Enumeration getKeys()>";
    "<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>"
    "<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>";
    "<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>"
    "<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>";
    "<sun.util.ResourceBundleEnumeration: java.lang.Object nextElement()>"
    "<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<sun.util.ResourceBundleEnumeration: java.lang.Object nextElement()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>"
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>"
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>"->"<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>";
    "<java.util.regex.Pattern: void <clinit>()>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: void <clinit>()>";
    "<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>";
    "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Arrays: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>"->"<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<java.lang.String: java.lang.String[] split(java.lang.String)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>"
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Math: int min(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>";
    "<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"
    "<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>";
    "<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>"
    "<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>";
    "<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>"->"<org.joda.time.PeriodType: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.DurationFieldType: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.AbstractPeriod: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"<org.joda.time.base.BasePeriod: int getValue(int)>";
    "<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>"->"<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Math: double log(double)>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Math: void <clinit>()>";
    "<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax(int)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax(int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax(int)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax(int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.StackTraceElement: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.StackTraceElement: boolean equals(java.lang.Object)>";
    "<java.lang.Character: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Character: boolean equals(java.lang.Object)>";
    "<java.lang.Boolean: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Boolean: boolean equals(java.lang.Object)>";
    "<java.security.AccessControlContext: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.AccessControlContext: boolean equals(java.lang.Object)>";
    "<java.io.File: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.File: boolean equals(java.lang.Object)>";
    "<java.util.Locale: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Locale: boolean equals(java.lang.Object)>";
    "<java.net.URL: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.URL: boolean equals(java.lang.Object)>";
    "<java.security.CodeSource: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.CodeSource: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>";
    "<java.util.Collections$ReverseComparator2: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$ReverseComparator2: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedMap: boolean equals(java.lang.Object)>";
    "<sun.misc.Signal: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.misc.Signal: boolean equals(java.lang.Object)>";
    "<java.net.HttpCookie: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.HttpCookie: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KeyTab: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KeyTab: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>";
    "<java.util.Date: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Date: boolean equals(java.lang.Object)>";
    "<java.net.InetAddress: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InetAddress: boolean equals(java.lang.Object)>";
    "<java.lang.Character$Subset: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Character$Subset: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>";
    "<java.util.HashMap$Entry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.HashMap$Entry: boolean equals(java.lang.Object)>";
    "<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>";
    "<sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>";
    "<sun.util.locale.LocaleExtensions: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.LocaleExtensions: boolean equals(java.lang.Object)>";
    "<java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>";
    "<java.net.URI: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.URI: boolean equals(java.lang.Object)>";
    "<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>";
    "<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>";
    "<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>";
    "<java.security.CodeSigner: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.CodeSigner: boolean equals(java.lang.Object)>";
    "<java.security.Timestamp: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.Timestamp: boolean equals(java.lang.Object)>";
    "<java.net.Proxy: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Proxy: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>";
    "<java.util.jar.Manifest: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.Manifest: boolean equals(java.lang.Object)>";
    "<java.util.jar.Attributes: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.Attributes: boolean equals(java.lang.Object)>";
    "<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.PrincipalName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.PrincipalName: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KerberosKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KerberosKey: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KerberosPrincipal: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KerberosPrincipal: boolean equals(java.lang.Object)>";
    "<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.Era: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.Era: boolean equals(java.lang.Object)>";
    "<java.net.NetworkInterface: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.NetworkInterface: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.WeakCache$LookupValue: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.WeakCache$LookupValue: boolean equals(java.lang.Object)>";
    "<java.math.MathContext: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.math.MathContext: boolean equals(java.lang.Object)>";
    "<java.text.DateFormatSymbols: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DateFormatSymbols: boolean equals(java.lang.Object)>";
    "<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>";
    "<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>";
    "<java.text.FieldPosition: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.FieldPosition: boolean equals(java.lang.Object)>";
    "<java.text.ParsePosition: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.ParsePosition: boolean equals(java.lang.Object)>";
    "<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>";
    "<sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>";
    "<java.text.StringCharacterIterator: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.StringCharacterIterator: boolean equals(java.lang.Object)>";
    "<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>";
    "<java.net.InetSocketAddress$InetSocketAddressHolder: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InetSocketAddress$InetSocketAddressHolder: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.Realm: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.Realm: boolean equals(java.lang.Object)>";
    "<sun.security.util.DerValue: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.DerValue: boolean equals(java.lang.Object)>";
    "<sun.security.x509.AlgorithmId: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.AlgorithmId: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.KerberosTime: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.KerberosTime: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KeyImpl: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KeyImpl: boolean equals(java.lang.Object)>";
    "<java.util.BitSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.BitSet: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X509CertInfo: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X509CertInfo: boolean equals(java.lang.Object)>";
    "<sun.security.x509.Extension: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.Extension: boolean equals(java.lang.Object)>";
    "<sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralNames: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralNames: boolean equals(java.lang.Object)>";
    "<sun.security.x509.OIDName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.OIDName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X500Name: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X500Name: boolean equals(java.lang.Object)>";
    "<sun.security.x509.IPAddressName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.IPAddressName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.CertificateExtensions: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.CertificateExtensions: boolean equals(java.lang.Object)>";
    "<sun.security.x509.KeyIdentifier: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.KeyIdentifier: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.URIName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.URIName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.DNSName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.DNSName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.RFC822Name: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.RFC822Name: boolean equals(java.lang.Object)>";
    "<sun.nio.ch.Util$2: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.ch.Util$2: boolean equals(java.lang.Object)>";
    "<java.net.InterfaceAddress: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InterfaceAddress: boolean equals(java.lang.Object)>";
    "<java.net.Inet6Address$Inet6AddressHolder: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Inet6Address$Inet6AddressHolder: boolean equals(java.lang.Object)>";
    "<java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>";
    "<java.security.Provider$UString: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.Provider$UString: boolean equals(java.lang.Object)>";
    "<sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>";
    "<sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>";
    "<javax.security.auth.Subject: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.Subject: boolean equals(java.lang.Object)>";
    "<java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>";
    "<java.text.DigitList: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DigitList: boolean equals(java.lang.Object)>";
    "<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>";
    "<sun.text.CompactByteArray: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.text.CompactByteArray: boolean equals(java.lang.Object)>";
    "<sun.security.util.BitArray: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.BitArray: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.KRBError: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.KRBError: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.HostAddresses: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.HostAddresses: boolean equals(java.lang.Object)>";
    "<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)>";
    "<sun.security.util.Cache$EqualByteArray: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.Cache$EqualByteArray: boolean equals(java.lang.Object)>";
    "<sun.security.x509.DistributionPoint: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.DistributionPoint: boolean equals(java.lang.Object)>";
    "<sun.security.x509.RDN: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.RDN: boolean equals(java.lang.Object)>";
    "<sun.security.x509.AVA: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.AVA: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralSubtrees: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralSubtrees: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralSubtree: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralSubtree: boolean equals(java.lang.Object)>";
    "<sun.security.x509.AccessDescription: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.AccessDescription: boolean equals(java.lang.Object)>";
    "<sun.security.x509.OtherName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.OtherName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.EDIPartyName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.EDIPartyName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.PolicyInformation: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.PolicyInformation: boolean equals(java.lang.Object)>";
    "<sun.nio.ch.FileKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.ch.FileKey: boolean equals(java.lang.Object)>";
    "<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>";
    "<sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>";
    "<java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.Checksum: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.Checksum: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.HostAddress: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.HostAddress: boolean equals(java.lang.Object)>";
    "<sun.security.x509.CRLExtensions: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.CRLExtensions: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>";
    "<java.security.spec.ECPoint: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.ECPoint: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X509Key: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X509Key: boolean equals(java.lang.Object)>";
    "<sun.security.x509.CertificatePolicyId: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.CertificatePolicyId: boolean equals(java.lang.Object)>";
    "<java.nio.file.attribute.FileTime$DaysAndNanos: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.file.attribute.FileTime$DaysAndNanos: boolean equals(java.lang.Object)>";
    "<java.text.AttributeEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.AttributeEntry: boolean equals(java.lang.Object)>";
    "<javax.naming.CompositeName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.CompositeName: boolean equals(java.lang.Object)>";
    "<javax.naming.Reference: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.Reference: boolean equals(java.lang.Object)>";
    "<sun.security.x509.DistributionPointName: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.DistributionPointName: boolean equals(java.lang.Object)>";
    "<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>";
    "<sun.security.pkcs.PKCS8Key: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.pkcs.PKCS8Key: boolean equals(java.lang.Object)>";
    "<sun.misc.SoftCache$Entry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.misc.SoftCache$Entry: boolean equals(java.lang.Object)>";
    "<sun.util.PreHashedMap$2$1$1: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.PreHashedMap$2$1$1: boolean equals(java.lang.Object)>";
    "<javax.naming.NameImpl: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.NameImpl: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.rcache.AuthTime: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.rcache.AuthTime: boolean equals(java.lang.Object)>";
    "<java.security.spec.ECFieldF2m: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.ECFieldF2m: boolean equals(java.lang.Object)>";
    "<java.security.spec.ECFieldFp: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.ECFieldFp: boolean equals(java.lang.Object)>";
    "<sun.text.IntHashtable: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.text.IntHashtable: boolean equals(java.lang.Object)>";
    "<sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>";
    "<java.text.PatternEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.PatternEntry: boolean equals(java.lang.Object)>";
    "<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixFileKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.fs.UnixFileKey: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixUserPrincipals$User: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.fs.UnixUserPrincipals$User: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.PeriodType: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean equals(java.lang.Object)>";
    "<java.security.AllPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.AllPermission: boolean equals(java.lang.Object)>";
    "<java.io.FilePermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.FilePermission: boolean equals(java.lang.Object)>";
    "<java.net.SocketPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.SocketPermission: boolean equals(java.lang.Object)>";
    "<java.security.UnresolvedPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.UnresolvedPermission: boolean equals(java.lang.Object)>";
    "<sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>";
    "<javax.security.auth.PrivateCredentialPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.PrivateCredentialPermission: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Enum: boolean equals(java.lang.Object)>";
    "<java.nio.charset.Charset: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.charset.Charset: boolean equals(java.lang.Object)>";
    "<java.util.IdentityHashMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.IdentityHashMap: boolean equals(java.lang.Object)>";
    "<java.util.AbstractMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractMap: boolean equals(java.lang.Object)>";
    "<java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>";
    "<java.util.jar.JarVerifier$VerifierCodeSource: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.JarVerifier$VerifierCodeSource: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedList: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedList: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedSet: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>";
    "<java.lang.Integer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Integer: boolean equals(java.lang.Object)>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Float: boolean equals(java.lang.Object)>";
    "<java.lang.Long: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Long: boolean equals(java.lang.Object)>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Double: boolean equals(java.lang.Object)>";
    "<java.lang.Short: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Short: boolean equals(java.lang.Object)>";
    "<java.lang.Byte: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Byte: boolean equals(java.lang.Object)>";
    "<java.math.BigInteger: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.math.BigInteger: boolean equals(java.lang.Object)>";
    "<java.math.BigDecimal: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.math.BigDecimal: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>";
    "<java.net.Inet4Address: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Inet4Address: boolean equals(java.lang.Object)>";
    "<java.net.Inet6Address: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Inet6Address: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Field: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Field: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Method: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Method: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>";
    "<java.text.RuleBasedBreakIterator: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.RuleBasedBreakIterator: boolean equals(java.lang.Object)>";
    "<java.security.cert.CertPath: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.CertPath: boolean equals(java.lang.Object)>";
    "<java.net.InetSocketAddress: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InetSocketAddress: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>";
    "<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>";
    "<java.util.GregorianCalendar: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.GregorianCalendar: boolean equals(java.lang.Object)>";
    "<java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessBuilder$Redirect: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessBuilder$Redirect: boolean equals(java.lang.Object)>";
    "<java.util.Hashtable: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Hashtable: boolean equals(java.lang.Object)>";
    "<java.text.MessageFormat: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.MessageFormat: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>";
    "<java.text.RuleBasedCollator: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.RuleBasedCollator: boolean equals(java.lang.Object)>";
    "<sun.misc.ProxyGenerator$ConstantPool$IndirectEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.misc.ProxyGenerator$ConstantPool$IndirectEntry: boolean equals(java.lang.Object)>";
    "<java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>";
    "<java.text.RuleBasedCollationKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.RuleBasedCollationKey: boolean equals(java.lang.Object)>";
    "<javax.naming.RefAddr: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.RefAddr: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixPath: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.fs.UnixPath: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>";
    "<org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.KrbException: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.KrbException: boolean equals(java.lang.Object)>";
    "<sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>";
    "<java.util.PropertyPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.PropertyPermission: boolean equals(java.lang.Object)>";
    "<java.security.BasicPermission: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.BasicPermission: boolean equals(java.lang.Object)>";
    "<java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>";
    "<java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>";
    "<java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>";
    "<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>";
    "<java.security.cert.Certificate: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.Certificate: boolean equals(java.lang.Object)>";
    "<java.util.AbstractList: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractList: boolean equals(java.lang.Object)>";
    "<java.util.Collections$EmptyList: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$EmptyList: boolean equals(java.lang.Object)>";
    "<java.util.Vector: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Vector: boolean equals(java.lang.Object)>";
    "<java.util.AbstractSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractSet: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>";
    "<sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>";
    "<java.nio.ByteBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.ByteBuffer: boolean equals(java.lang.Object)>";
    "<java.nio.CharBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.CharBuffer: boolean equals(java.lang.Object)>";
    "<java.nio.LongBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.LongBuffer: boolean equals(java.lang.Object)>";
    "<java.nio.ShortBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.ShortBuffer: boolean equals(java.lang.Object)>";
    "<java.nio.IntBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.IntBuffer: boolean equals(java.lang.Object)>";
    "<java.nio.FloatBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.FloatBuffer: boolean equals(java.lang.Object)>";
    "<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.ImmutableGregorianDate: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.ImmutableGregorianDate: boolean equals(java.lang.Object)>";
    "<java.text.SimpleDateFormat: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.SimpleDateFormat: boolean equals(java.lang.Object)>";
    "<java.text.DecimalFormat: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DecimalFormat: boolean equals(java.lang.Object)>";
    "<java.text.ChoiceFormat: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.ChoiceFormat: boolean equals(java.lang.Object)>";
    "<java.security.cert.X509CRL: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.X509CRL: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.LocalDate: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.LocalTime: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>";
    "<java.util.RegularEnumSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.RegularEnumSet: boolean equals(java.lang.Object)>";
    "<java.util.JumboEnumSet: boolean equals(java.lang.Object)>"
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.JumboEnumSet: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "<org.joda.time.base.AbstractPartial: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"
    "<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"<org.joda.time.Instant: void <init>(long)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"<org.joda.time.Instant: long getMillis()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"<org.joda.time.base.BaseDateTime: long getMillis()>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Date: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"
    "<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: int size()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: void <init>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>"->"<java.lang.Object: void <init>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>";
    "<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>";
    "<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: void <init>()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.text.SimpleDateFormat: java.lang.String toPattern()>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.SimpleDateFormat: java.lang.String toPattern()>";
    "<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>"->"<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.IslamicChronology: int getDayOfMonth(long)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"->"<org.joda.time.chrono.IslamicChronology: int getDayOfMonth(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfMonth(long)>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfMonth(long)>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "<org.joda.time.chrono.IslamicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "<org.joda.time.chrono.GJEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>"->"<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<org.joda.time.field.DelegatedDurationField: int hashCode()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax()>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax()>";
    "<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax()>"
    "<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.DateTimeField: long setExtended(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>";
    "<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.GJChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "<org.joda.time.base.AbstractInstant: int hashCode()>"->"<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Integer: int intValue()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Integer: int intValue()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.Object,java.lang.Object)>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.Object,java.lang.Object)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.util.WeakHashMap$HashIterator: boolean hasNext()>"
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>"
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>"
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>"
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "<java.io.InputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>"->"<java.util.Locale: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: int hashCode()>"
    "<java.util.Locale: int hashCode()>"
    "<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: int hashCode()>"->"<java.util.Locale: int hashCode()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Date: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.String: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "<java.util.regex.Matcher: boolean matches()>"
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.util.regex.Matcher: boolean matches()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Locale: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Date: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Vector: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.DividedDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>";
    "<java.net.HttpURLConnection: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.net.HttpURLConnection: void <clinit>()>";
    "<java.net.URLConnection: void <clinit>()>"
    "<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.net.URLConnection: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.net.HttpURLConnection: void <clinit>()>";
    "<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.net.URLConnection: void <clinit>()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean isFixed()>"
    "<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean isFixed()>";
    "<java.io.BufferedInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "<sun.net.www.http.HttpCaptureInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "<sun.net.www.http.ChunkedInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "<sun.net.www.http.KeepAliveStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "<sun.net.www.MeteredStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "<java.net.SocketInputStream: void close()>"
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.net.SocketInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.net.SocketInputStream: void close()>";
    "<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.net.SocketInputStream: void close()>";
}
