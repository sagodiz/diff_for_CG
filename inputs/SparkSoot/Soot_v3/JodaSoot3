digraph "call-graph" {
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"
    "<java.lang.Object: void <clinit>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.File: void <clinit>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>"
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.System: void <clinit>()>"
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ThreadLocal: void <clinit>()>"
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.ThreadLocal: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>"
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"(23)<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>";
    "<java.lang.ThreadLocal: void <init>()>"
    "(23)<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>"->"<java.lang.ThreadLocal: void <init>()>";
    "<java.lang.ThreadLocal: void set(java.lang.Object)>"
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.ThreadLocal: void set(java.lang.Object)>";
    "<java.io.PrintStream: void println(java.lang.String)>"
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>";
    "<java.util.HashMap: void <clinit>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.HashMap: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <clinit>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <init>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.HashMap: void <init>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.HashMap: void <init>()>";
    "<java.lang.Object: void <init>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>";
    "<java.io.BufferedReader: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>";
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.String: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.TreeMap: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.FileOutputStream: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileOutputStream: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: void <clinit>()>";
    "<java.lang.Short: java.lang.Short valueOf(short)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: java.lang.Short valueOf(short)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: java.lang.Short valueOf(short)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<java.lang.Long: java.lang.Long valueOf(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.ConcurrentHashMap: void <clinit>()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.atomic.AtomicReference: void <clinit>()>"
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"->"<java.lang.Object: void <clinit>()>";
    "(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"->"<java.lang.Object: void <clinit>()>";
    "(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"->"<java.lang.Object: void <clinit>()>";
    "(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"->"<java.lang.Object: void <clinit>()>";
    "(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>";
    "<java.util.TimeZone: java.util.TimeZone getDefault()>"
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.TimeZone: java.util.TimeZone getDefault()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "<java.lang.System: java.lang.String getProperty(java.lang.String)>"
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.TimeZone: void <clinit>()>"
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.TimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.System: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>";
    "<java.lang.Character: boolean isDigit(char)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Character: boolean isDigit(char)>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Character: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: int digit(char,int)>"
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Character: int digit(char,int)>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Math: void <clinit>()>"
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Math: double log(double)>"
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Math: double log(double)>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(36)<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Throwable: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.io.File: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Throwable: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Class: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Math: double log(double)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: void <clinit>()>";
    "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>"
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Collections: void <clinit>()>"
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.Collections: void <clinit>()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.lang.Object: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Throwable: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Throwable: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Throwable: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<java.util.Collections: java.util.Set singleton(java.lang.Object)>"
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.util.Collections: java.util.Set singleton(java.lang.Object)>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"(36)<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(175)<org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"(175)<org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>";
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>";
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>";
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ref.Reference: void <clinit>()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ref.Reference: void <clinit>()>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>"
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.lang.Object: void <clinit>()>";
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuilder: void <init>()>"
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <init>()>";
    "(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>"
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>"->"<java.lang.Object: void <init>()>";
    "(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>"
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"
    "(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Integer: int intValue()>"
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: int intValue()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(704)<org.joda.time.DateTimeZone: java.lang.String getID()>"
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<java.io.IOException: void <init>(java.lang.String)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "<java.io.DataInputStream: int readUnsignedByte()>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: java.lang.String readUTF()>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: long readLong()>"
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: long readLong()>";
    "<java.io.DataInputStream: int readUnsignedShort()>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "<java.io.DataInputStream: int readInt()>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readInt()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.io.DataInputStream: boolean readBoolean()>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: boolean readBoolean()>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: byte readByte()>"
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: byte readByte()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: boolean readBoolean()>";
    "<java.io.DataInputStream: void <init>(java.io.InputStream)>"
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.io.DataInputStream: void <init>(java.io.InputStream)>";
    "<java.lang.ref.SoftReference: void <init>(java.lang.Object)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ref.SoftReference: void <init>(java.lang.Object)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>";
    "(184)<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"(184)<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>";
    "<java.io.FileInputStream: void <clinit>()>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.FileInputStream: void <clinit>()>";
    "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.File: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void printStackTrace()>"
    "(184)<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>"->"<java.lang.Throwable: void printStackTrace()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: void <init>(int)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(201)<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"(201)<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>";
    "(201)<org.joda.time.tz.ZoneInfoProvider$1: java.lang.Object run()>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"(201)<org.joda.time.tz.ZoneInfoProvider$1: java.lang.Object run()>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"
    "(201)<org.joda.time.tz.ZoneInfoProvider$1: java.lang.Object run()>"->"(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>"
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>";
    "(43)<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$000(org.joda.time.tz.ZoneInfoProvider)>"
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"(43)<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$000(org.joda.time.tz.ZoneInfoProvider)>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"(43)<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$000(org.joda.time.tz.ZoneInfoProvider)>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassLoader: void <clinit>()>"
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.ClassLoader: void <clinit>()>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "(201)<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.io.File: void <init>(java.io.File,java.lang.String)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "<java.io.FileInputStream: void <init>(java.io.File)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.io.FileInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: void <init>()>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.IllegalArgumentException: void <init>()>"
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <init>()>";
    "(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.Throwable: void <clinit>()>";
    "(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>"
    "(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <init>()>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>";
    "(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(2526)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>"
    "(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>"->"(2526)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>";
    "(2522)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>"
    "(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>"->"(2522)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: boolean contains(java.lang.Object)>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<java.util.ArrayList: boolean isEmpty()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<java.util.ArrayList: int size()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object get(int)>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <init>()>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(1332)<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>";
    "(54)<org.joda.time.chrono.BaseChronology: void <init>()>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>"->"(54)<org.joda.time.chrono.BaseChronology: void <init>()>";
    "(65)<org.joda.time.Chronology: void <init>()>"
    "(54)<org.joda.time.chrono.BaseChronology: void <init>()>"->"(65)<org.joda.time.Chronology: void <init>()>";
    "(65)<org.joda.time.Chronology: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(42)<org.joda.time.tz.UTCProvider: void <init>()>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(42)<org.joda.time.tz.UTCProvider: void <init>()>";
    "(42)<org.joda.time.tz.UTCProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Throwable: void printStackTrace()>";
    "(88)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(88)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"
    "(88)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String)>"->"(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.Collections: void <clinit>()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.TreeSet: void <clinit>()>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.TreeSet: void <clinit>()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.ref.Reference: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.String: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.lang.String: java.lang.String intern()>"
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.String: java.lang.String intern()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.ref.SoftReference: void <init>(java.lang.Object)>";
    "<java.io.FilterInputStream: void close()>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.FilterInputStream: void close()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.FilterInputStream: void close()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.DataInputStream: void <init>(java.io.InputStream)>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: void <init>()>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<java.util.TreeSet: void <init>(java.util.Collection)>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.TreeSet: void <init>(java.util.Collection)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.String: boolean endsWith(java.lang.String)>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>"
    "(112)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>";
    "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.io.File: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Throwable: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.Collections: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.TreeSet: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Throwable: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Throwable: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.TreeSet: void <init>(java.util.Collection)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: void <init>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: void <init>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.io.File: boolean exists()>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.File: boolean exists()>";
    "<java.io.File: boolean isDirectory()>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.File: boolean isDirectory()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <init>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "<java.lang.StringBuffer: java.lang.Appendable append(char)>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>"
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>"
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>"
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>";
    "<java.lang.StringBuilder: int length()>"
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: int length()>";
    "<java.lang.StringBuilder: char charAt(int)>"
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<java.lang.StringBuilder: void setCharAt(int,char)>"
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: void setCharAt(int,char)>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.String: int length()>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: int length()>";
    "<java.lang.String: char charAt(int)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: char charAt(int)>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Throwable: void <clinit>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Throwable: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Arrays: void <clinit>()>"
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: void sort(java.lang.Object[],int,int)>"
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.util.Arrays: void sort(java.lang.Object[],int,int)>";
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.lang.Object: void <clinit>()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>"
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>";
    "(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"
    "(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"(54)<org.joda.time.chrono.BaseChronology: void <init>()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"
    "(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"(319)<org.joda.time.chrono.AssembledChronology: void setFields()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(436)<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(436)<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>";
    "(436)<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<java.lang.Object: void <clinit>()>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<java.lang.Object: void <clinit>()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<java.lang.Object: void <clinit>()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<java.lang.Object: void <clinit>()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<java.lang.Object: void <clinit>()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<java.lang.Object: void <clinit>()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<java.lang.Object: void <clinit>()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<java.lang.Object: void <clinit>()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<java.lang.Object: void <clinit>()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<java.lang.Object: void <clinit>()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<java.lang.Object: void <clinit>()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<java.lang.Object: void <clinit>()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<java.lang.Object: void <clinit>()>";
    "(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: void <clinit>()>";
    "(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(33)<org.joda.time.DateTimeField: void <init>()>"
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(33)<org.joda.time.DateTimeField: void <init>()>";
    "(33)<org.joda.time.DateTimeField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<java.util.HashMap: void <init>(int)>"
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: void <init>(int)>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(70)<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>"
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"(70)<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(30)<org.joda.time.DurationField: void <init>()>"
    "(70)<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>"->"(30)<org.joda.time.DurationField: void <init>()>";
    "(30)<org.joda.time.DurationField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: void <init>(int)>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"->"(33)<org.joda.time.DateTimeField: void <init>()>";
    "(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>"
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(280)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>"
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(280)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>"
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>"
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>"
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>"
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>"
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(204)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>"
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(204)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>"
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>"
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>"
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>"
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"->"(30)<org.joda.time.DurationField: void <init>()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(464)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(464)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>"
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>"
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>"
    "(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>"->"(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(204)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(280)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(176)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(188)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(200)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(200)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(208)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(208)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(212)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(212)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(216)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(216)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(252)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(252)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>"
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(280)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(204)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "<java.util.concurrent.atomic.AtomicReference: void <init>()>"
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "(541)<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>"
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(541)<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>";
    "(541)<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.InternalError: void <init>()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.InternalError: void <init>()>";
    "(53)<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(53)<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>";
    "(53)<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(252)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(216)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(208)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(212)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(200)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.InternalError: void <init>()>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.System: void <clinit>()>";
    "(553)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>"
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"(553)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>";
    "(549)<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>"
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"(549)<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>";
    "(549)<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>"
    "(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<java.util.Locale: java.util.Locale getDefault()>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Locale: void <clinit>()>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.util.Locale: void <clinit>()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <init>()>";
    "(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.Throwable: void <clinit>()>";
    "(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>"
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.UnsupportedOperationException: void <init>()>"
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"
    "(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Throwable: void <clinit>()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: void <init>()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String toString()>"
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.String: java.lang.String toString()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String concat(java.lang.String)>"
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "<java.lang.String: java.lang.String substring(int)>"
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<java.lang.StringBuffer: void <init>()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: void <init>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.TimeZone: java.lang.String getID()>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.util.TimeZone: java.lang.String getID()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.String: boolean startsWith(java.lang.String)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <clinit>()>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <init>()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "<java.util.HashMap: boolean containsKey(java.lang.Object)>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>"
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>"
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>"
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(196)<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(196)<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(196)<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(196)<org.joda.time.chrono.GregorianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"
    "(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"<java.lang.Object: void <clinit>()>";
    "(152)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)>"
    "(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"(152)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)>";
    "(152)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: void <init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)>"->"(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"(464)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(38)<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(38)<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"
    "(38)<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<java.lang.Object: void <clinit>()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>";
    "(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"->"(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(234)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYear()>"
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(234)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYear()>";
    "(242)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerMonth()>"
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(242)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerMonth()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(234)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYear()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>"
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(94)<org.joda.time.DurationFieldType: void <init>(java.lang.String)>"
    "(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>"->"(94)<org.joda.time.DurationFieldType: void <init>(java.lang.String)>";
    "(94)<org.joda.time.DurationFieldType: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(259)<org.joda.time.DurationFieldType$StandardDurationFieldType: void <init>(java.lang.String,byte)>";
    "(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(153)<org.joda.time.DateTimeFieldType: void <init>(java.lang.String)>"
    "(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>"->"(153)<org.joda.time.DateTimeFieldType: void <init>(java.lang.String)>";
    "(153)<org.joda.time.DateTimeFieldType: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(456)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: void <init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "(44)<org.joda.time.field.MillisDurationField: void <init>()>"
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"(44)<org.joda.time.field.MillisDurationField: void <init>()>";
    "(44)<org.joda.time.field.MillisDurationField: void <init>()>"->"(30)<org.joda.time.DurationField: void <init>()>";
    "(30)<org.joda.time.UTCDateTimeZone: void <init>()>"
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(30)<org.joda.time.UTCDateTimeZone: void <init>()>";
    "(30)<org.joda.time.UTCDateTimeZone: void <init>()>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>"
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>";
    "(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>"
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$100()>"->"<java.lang.Object: void <clinit>()>";
    "(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(50)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$000()>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Throwable: void <clinit>()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(155)<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(155)<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>"
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>"
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>"->"(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(43)<org.joda.time.field.PreciseDurationField: void <init>(org.joda.time.DurationFieldType,long)>";
    "(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>"
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>"
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>"
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>";
    "(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"
    "(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<java.lang.Object: void <clinit>()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"
    "(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(52)<org.joda.time.base.AbstractDateTime: void <init>()>"
    "(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"(52)<org.joda.time.base.AbstractDateTime: void <init>()>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"
    "(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>";
    "(294)<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>"
    "(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"(294)<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"
    "(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.base.AbstractInstant: void <init>()>"
    "(52)<org.joda.time.base.AbstractDateTime: void <init>()>"->"(61)<org.joda.time.base.AbstractInstant: void <init>()>";
    "(61)<org.joda.time.base.AbstractInstant: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: int size()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: void <init>()>";
    "<java.lang.ThreadLocal: java.lang.Object get()>"
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.ThreadLocal: java.lang.Object get()>";
    "<java.lang.InternalError: void <init>(java.lang.String)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: int size()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<java.util.TreeMap: java.util.Collection values()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Collection values()>";
    "<java.util.TreeMap$Values: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Values: java.util.Iterator iterator()>";
    "<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<java.util.TreeMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "<java.util.TreeMap: void <init>()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: void <init>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: void <init>(int)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<java.util.TreeMap: java.util.Set entrySet()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<java.util.TreeMap$EntryIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.lang.Object next()>";
    "<java.io.DataOutputStream: void writeShort(int)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.io.DataOutputStream: void writeUTF(java.lang.String)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.util.TreeMap: void putAll(java.util.Map)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void putAll(java.util.Map)>";
    "<java.util.TreeMap: void <init>(java.util.Comparator)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<java.io.FilterOutputStream: void close()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FilterOutputStream: void close()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FilterOutputStream: void close()>";
    "<java.io.DataOutputStream: void <init>(java.io.OutputStream)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
    "<java.io.FileOutputStream: void <init>(java.io.File)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "<java.io.File: java.io.File getParentFile()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.io.File getParentFile()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.io.File getParentFile()>";
    "<java.io.File: boolean mkdirs()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean mkdirs()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean exists()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.Locale: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "<java.text.DateFormatSymbols: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.util.HashMap: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>"
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>";
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.System: long currentTimeMillis()>"
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.System: long currentTimeMillis()>";
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(298)<org.joda.time.Period: void <init>()>"
    "(65)<org.joda.time.Period: void <clinit>()>"->"(298)<org.joda.time.Period: void <init>()>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(298)<org.joda.time.Period: void <init>()>"->"(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>";
    "(45)<org.joda.time.base.AbstractPeriod: void <init>()>"
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(45)<org.joda.time.base.AbstractPeriod: void <init>()>";
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>";
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>";
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>"
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>"->"<java.lang.Object: void <init>()>";
    "(45)<org.joda.time.base.AbstractPeriod: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(56)<org.joda.time.base.AbstractPeriod: int size()>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>"
    "(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(56)<org.joda.time.base.AbstractPeriod: int size()>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(57)<org.joda.time.base.BasePeriod$1: void <init>()>"
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"->"(57)<org.joda.time.base.BasePeriod$1: void <init>()>";
    "(57)<org.joda.time.base.BasePeriod$1: void <init>()>"->"(45)<org.joda.time.base.AbstractPeriod: void <init>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.util.HashMap: void <init>(int)>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String intern()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String intern()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(757)<org.joda.time.Period: int getYears()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(757)<org.joda.time.Period: int getYears()>";
    "(766)<org.joda.time.Period: int getMonths()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(766)<org.joda.time.Period: int getMonths()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(766)<org.joda.time.Period: int getMonths()>";
    "(757)<org.joda.time.Period: int getYears()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(757)<org.joda.time.Period: int getYears()>"->"<java.lang.Object: void <clinit>()>";
    "(766)<org.joda.time.Period: int getMonths()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(766)<org.joda.time.Period: int getMonths()>"->"<java.lang.Object: void <clinit>()>";
    "(766)<org.joda.time.Period: int getMonths()>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(757)<org.joda.time.Period: int getYears()>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(490)<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(490)<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(490)<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(45)<org.joda.time.base.AbstractPeriod: void <init>()>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "<java.text.DateFormatSymbols: void <init>(java.util.Locale)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: void <init>(java.util.Locale)>";
    "<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.ArrayList: int size()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1722)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1722)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>";
    "(1157)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1157)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"<java.lang.Object: void <init>()>";
    "(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.util.ArrayList: void <clinit>()>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <init>(java.util.Collection)>"
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.lang.Object: void <init>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: void <init>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>";
    "(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>"
    "(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"->"(914)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "(914)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>"->"<java.lang.Object: void <init>()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: int size()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>";
    "(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(45)<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "(35)<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(35)<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "(60)<org.joda.time.UTCDateTimeZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(60)<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(35)<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "(65)<org.joda.time.UTCDateTimeZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(65)<org.joda.time.UTCDateTimeZone: long previousTransition(long)>";
    "(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(69)<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(69)<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>";
    "(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: int binarySearch(long[],long)>"
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>"
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>"
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"
    "(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>"->"(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>"
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>"
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"
    "(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>"->"(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"
    "(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"->"(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>"
    "(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"->"(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>";
    "(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>"->"(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"
    "(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"->"(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>"
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>";
    "(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>"->"<java.lang.Object: void <init>()>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"
    "(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"->"(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>";
    "(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"->"(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>";
    "(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"->"(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"
    "(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"->"(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>";
    "(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"->"(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>";
    "(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"->"(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"
    "(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"->"(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>";
    "(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"->"(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>";
    "(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: int length()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ArrayList: void <init>(int)>"
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.util.ArrayList: void <init>(int)>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<java.io.BufferedReader: void <init>(java.io.Reader)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void <init>(java.io.Reader)>";
    "<java.io.BufferedReader: void close()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void close()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void close()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: boolean isWhitespace(char)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Character: boolean isWhitespace(char)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.System: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Character: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void close()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.io.FileOutputStream: void close()>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void close()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void close()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: java.io.File getParentFile()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: java.io.File getParentFile()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: boolean mkdirs()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: boolean exists()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: boolean equals(int[],int[])>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(int[],int[])>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(int[],int[])>";
    "<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>";
    "<java.util.Arrays: boolean equals(long[],long[])>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(long[],long[])>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "(635)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>"
    "(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"->"(635)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>";
    "(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.DataOutputStream: void flush()>"
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.io.DataOutputStream: void flush()>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "<java.io.DataOutputStream: void writeByte(int)>"
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<java.io.DataOutputStream: void writeInt(int)>"
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<java.io.DataOutputStream: void writeLong(long)>"
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeLong(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(35)<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(45)<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>";
    "<java.util.HashSet: void <clinit>()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.String: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "<java.util.HashSet: boolean add(java.lang.Object)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<java.util.HashSet: int size()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: int size()>";
    "<java.util.HashSet: java.util.Iterator iterator()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<java.util.HashSet: void <init>()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: void <init>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.io.DataOutputStream: void writeBoolean(boolean)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeBoolean(boolean)>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeBoolean(boolean)>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>";
    "(95)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>"
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(95)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.io.PrintStream: void println(java.lang.String)>";
    "(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>";
    "<java.util.StringTokenizer: java.lang.String nextToken()>"
    "(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"
    "(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"->"(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: int parseInt(java.lang.String)>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>";
    "(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>";
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>"
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>";
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4300()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>"
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>";
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"->"<java.lang.Object: void <clinit>()>";
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"
    "(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"->"(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>"
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>";
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2000()>"->"<java.lang.Object: void <clinit>()>";
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>"
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>";
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3900()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3700()>"->"<java.lang.Object: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>"
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>"->"(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<java.lang.Object: void <init>()>";
    "(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"<java.lang.Object: void <clinit>()>";
    "(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>"
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>";
    "(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>"->"<java.lang.Object: void <init>()>";
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"<java.lang.Object: void <clinit>()>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"->"<java.lang.Object: void <clinit>()>";
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"
    "(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"->"(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>";
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>"
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"(42)<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>";
    "(42)<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <init>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1255)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>"
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(1255)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>";
    "(1255)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.String: int length()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"<java.lang.Object: void <clinit>()>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"<java.lang.Object: void <clinit>()>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"<java.lang.Object: void <clinit>()>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1784)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>"
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"(1784)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>";
    "(1784)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <init>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Throwable: void <clinit>()>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Object: void <clinit>()>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>"
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(207)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>"
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"(207)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>";
    "(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.Throwable: void <clinit>()>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "(38)<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>"
    "(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"->"(38)<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>";
    "(38)<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <init>()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<java.lang.Object: void <init>()>";
    "(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.Throwable: void <clinit>()>";
    "(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.Object: void <clinit>()>";
    "(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <clinit>()>";
    "(46)<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>"
    "(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"->"(46)<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>";
    "(46)<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <init>()>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Throwable: void <clinit>()>";
    "(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <clinit>()>";
    "(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>"
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>";
    "(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(59)<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>"
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"(59)<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>";
    "(59)<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>";
    "(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>"->"(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(305)<org.joda.time.base.BaseDateTime: long getMillis()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(453)<org.joda.time.MutableDateTime: void setMillis(long)>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "(339)<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>"
    "(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>"->"(339)<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>";
    "(339)<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>"->"(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>";
    "(327)<org.joda.time.base.BaseDateTime: void setMillis(long)>"
    "(453)<org.joda.time.MutableDateTime: void setMillis(long)>"->"(327)<org.joda.time.base.BaseDateTime: void setMillis(long)>";
    "(327)<org.joda.time.base.BaseDateTime: void setMillis(long)>"->"(294)<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(572)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>"
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"(572)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>";
    "(572)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(239)<org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(239)<org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Throwable: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: void <init>()>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(436)<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>"
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(610)<org.joda.time.LocalDate: long getLocalMillis()>"
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<java.lang.Object: void <clinit>()>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ArithmeticException: void <init>(java.lang.String)>"
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>";
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: void <clinit>()>"
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReferenceArray: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>";
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"->"<java.lang.String: int length()>";
    "(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.String: void <init>(java.lang.String)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: void <init>(java.lang.String)>";
    "(171)<org.joda.time.DateTime: void <init>()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(171)<org.joda.time.DateTime: void <init>()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(116)<org.joda.time.base.AbstractDateTime: int getYear()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"
    "(171)<org.joda.time.DateTime: void <init>()>"->"(61)<org.joda.time.base.BaseDateTime: void <init>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(171)<org.joda.time.DateTime: void <init>()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>";
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>";
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"<java.lang.Object: void <clinit>()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"<java.lang.Object: void <clinit>()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"<java.lang.Object: void <clinit>()>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"<java.lang.Object: void <clinit>()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"<java.lang.Object: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"<java.lang.Object: void <clinit>()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"<java.lang.Object: void <clinit>()>";
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"<java.lang.Object: void <clinit>()>";
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<java.lang.Object: void <clinit>()>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "<java.lang.Math: int max(int,int)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: int max(int,int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: int max(int,int)>";
    "<java.util.Collections: void sort(java.util.List)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections: void sort(java.util.List)>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"(175)<org.joda.time.tz.ZoneInfoProvider: java.util.Set getAvailableIDs()>";
    "(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"->"(36)<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.ArrayList: java.util.Iterator iterator()>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<java.util.ArrayList$Itr: boolean hasNext()>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "<java.util.ArrayList$Itr: java.lang.Object next()>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: void <init>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>()>";
    "(2314)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2314)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>";
    "<java.lang.Enum: void <init>(java.lang.String,int)>"
    "(2314)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>";
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>"
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>"->"<java.lang.Object: void <init>()>";
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>"
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>";
    "(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>"->"<java.lang.Object: void <init>()>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<java.lang.Object: void <init>()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: int size()>"
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: int size()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>";
    "(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.Throwable: void <clinit>()>";
    "(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.Object: void <clinit>()>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.Instant: long getMillis()>"
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>"
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.String: int length()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: int length()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>"
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(118)<org.joda.time.Instant: void <init>(long)>"
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(118)<org.joda.time.Instant: void <init>(long)>"->"(61)<org.joda.time.base.AbstractInstant: void <init>()>";
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(60)<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(60)<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<java.lang.Object: void <clinit>()>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>"
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(48)<org.joda.time.base.BaseLocal: void <init>()>"
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(54)<org.joda.time.base.AbstractPartial: void <init>()>"
    "(48)<org.joda.time.base.BaseLocal: void <init>()>"->"(54)<org.joda.time.base.AbstractPartial: void <init>()>";
    "(54)<org.joda.time.base.AbstractPartial: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>"
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"
    "(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Throwable: void <clinit>()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.Object: void <clinit>()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: void <init>()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"
    "(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Throwable: void <clinit>()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Object: void <clinit>()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>"
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"
    "(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>";
    "(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(726)<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(726)<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>"
    "(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"
    "(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>"
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"
    "(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>"->"(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>";
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"<java.lang.Object: void <clinit>()>";
    "(815)<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>"
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"(815)<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>";
    "(815)<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>"->"<java.lang.Object: void <init>()>";
    "(207)<org.joda.time.chrono.GregorianChronology: long calculateFirstDayOfYearMillis(int)>"
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"(207)<org.joda.time.chrono.GregorianChronology: long calculateFirstDayOfYearMillis(int)>";
    "(207)<org.joda.time.chrono.GregorianChronology: long calculateFirstDayOfYearMillis(int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(735)<org.joda.time.chrono.BasicChronology: int getMaxMonth()>"
    "(726)<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>"->"(735)<org.joda.time.chrono.BasicChronology: int getMaxMonth()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1499)<org.joda.time.LocalDate: int getMonthOfYear()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1533)<org.joda.time.LocalDate: int getDayOfMonth()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(436)<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.util.StringTokenizer: boolean hasMoreTokens()>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.lang.String: int indexOf(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int length()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: void <clinit>()>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <clinit>()>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: void <init>()>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <init>()>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Throwable: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Throwable: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.util.Locale: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.StringTokenizer: int countTokens()>"
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: int countTokens()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>"
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: int countTokens()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>";
    "<java.io.BufferedReader: java.lang.String readLine()>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<java.lang.String: java.lang.String trim()>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: java.lang.String trim()>";
    "<java.lang.String: int indexOf(int)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: int indexOf(int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: char charAt(int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: int length()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: char charAt(int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.LenientChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"
    "(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(57)<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>";
    "(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>"
    "(57)<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(64)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>"->"(64)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"
    "(64)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(33)<org.joda.time.DateTimeField: void <init>()>";
    "(67)<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(67)<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(51)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(51)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "(52)<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(50)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(50)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(51)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(67)<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>"
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(57)<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>"
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(57)<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(50)<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>"
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(50)<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(69)<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(60)<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(60)<org.joda.time.UTCDateTimeZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(65)<org.joda.time.UTCDateTimeZone: long previousTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(50)<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>";
    "<java.lang.Object: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: java.lang.Object clone()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<java.lang.Object: void <clinit>()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"<java.lang.Object: void <clinit>()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(392)<org.joda.time.DateTimeField: long setExtended(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "(543)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>"
    "(543)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>"->"(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int indexOf(int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int length()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: java.lang.String substring(int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int length()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"
    "(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>"
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(216)<org.joda.time.DurationFieldType: java.lang.String getName()>"
    "(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>"->"(216)<org.joda.time.DurationFieldType: java.lang.String getName()>";
    "(243)<org.joda.time.DurationFieldType: java.lang.String toString()>"
    "(243)<org.joda.time.DurationFieldType: java.lang.String toString()>"->"(216)<org.joda.time.DurationFieldType: java.lang.String getName()>";
    "(431)<org.joda.time.DateTimeFieldType: java.lang.String toString()>"
    "(431)<org.joda.time.DateTimeFieldType: java.lang.String toString()>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(1275)<org.joda.time.DateTimeZone: java.lang.String toString()>"
    "(1275)<org.joda.time.DateTimeZone: java.lang.String toString()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(314)<org.joda.time.base.AbstractDateTime: java.lang.String toString()>"
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"
    "(314)<org.joda.time.base.AbstractDateTime: java.lang.String toString()>"->"(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>";
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>"
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>";
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1500()>"->"<java.lang.Object: void <clinit>()>";
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(80)<org.joda.time.UTCDateTimeZone: int hashCode()>"
    "(80)<org.joda.time.UTCDateTimeZone: int hashCode()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<java.lang.String: int hashCode()>"
    "(80)<org.joda.time.UTCDateTimeZone: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "<java.lang.Object: int hashCode()>"
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>"
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"
    "(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>"
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(1267)<org.joda.time.DateTimeZone: int hashCode()>"
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>"
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(1267)<org.joda.time.DateTimeZone: int hashCode()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1267)<org.joda.time.DateTimeZone: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "<java.lang.Class: java.lang.String getName()>"
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<java.lang.Class: java.lang.String getName()>";
    "(204)<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>"
    "(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>"->"(204)<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>"
    "(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Object initialValue()>"
    "(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"
    "(23)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Object initialValue()>"->"(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>";
    "(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"->"<java.lang.Boolean: void <clinit>()>";
    "(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: boolean booleanValue()>"
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.Boolean: boolean booleanValue()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean exists()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean mkdirs()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean isDirectory()>";
    "(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: int size()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<java.util.ArrayList$Itr: void remove()>"
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: void remove()>";
    "(674)<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>"
    "(757)<org.joda.time.Period: int getYears()>"->"(674)<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>";
    "(329)<org.joda.time.base.BasePeriod: int getValue(int)>"
    "(674)<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(766)<org.joda.time.Period: int getMonths()>"->"(674)<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>";
    "(617)<org.joda.time.PeriodType: int size()>"
    "(56)<org.joda.time.base.AbstractPeriod: int size()>"->"(617)<org.joda.time.PeriodType: int size()>";
    "(628)<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>"
    "(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(628)<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>"
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>";
    "(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"->"(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(61)<org.joda.time.tz.FixedDateTimeZone: boolean isFixed()>"
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(61)<org.joda.time.tz.FixedDateTimeZone: boolean isFixed()>";
    "(1598)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>"
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(1598)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>";
    "(111)<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>"
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(111)<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>";
    "(55)<org.joda.time.UTCDateTimeZone: boolean isFixed()>"
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(55)<org.joda.time.UTCDateTimeZone: boolean isFixed()>";
    "(111)<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>"->"(1598)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(735)<org.joda.time.chrono.BasicChronology: int getMaxMonth()>";
    "(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(334)<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>"
    "(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>"->"(334)<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "(592)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax()>"
    "(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"->"(592)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax()>";
    "(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(278)<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>"
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(278)<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>"
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>"
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(32)<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>"
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(32)<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>";
    "(227)<org.joda.time.field.UnsupportedDurationField: int compareTo(org.joda.time.DurationField)>"
    "(32)<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>"->"(227)<org.joda.time.field.UnsupportedDurationField: int compareTo(org.joda.time.DurationField)>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: int size()>";
    "(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: int size()>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>";
    "<java.io.File: java.lang.String getName()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.lang.String getName()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"
    "<java.lang.Object: boolean equals(java.lang.Object)>"
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(59)<org.joda.time.field.BaseDurationField: java.lang.String getName()>"
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"(59)<org.joda.time.field.BaseDurationField: java.lang.String getName()>";
    "(59)<org.joda.time.field.BaseDurationField: java.lang.String getName()>"->"(216)<org.joda.time.DurationFieldType: java.lang.String getName()>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(62)<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>"
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"(62)<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>";
    "(62)<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>"
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(934)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(934)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>";
    "(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(934)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"->"<java.lang.Object: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.DateTimeParser getUnderlying()>"
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"(44)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.DateTimeParser getUnderlying()>";
    "<java.lang.Long: long longValue()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: long longValue()>";
    "(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"
    "(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.Throwable: void <clinit>()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: void <init>()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>";
    "(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"
    "(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"->"(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.util.ArrayList: void <init>(int)>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: int size()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: int size()>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: int size()>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: int size()>";
    "(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"->"(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "(675)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>"
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(675)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>";
    "(675)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>"->"(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>"
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>"
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>";
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"
    "(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: int indexOf(int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "(661)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>"
    "(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"(661)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"
    "(661)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>"->"(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(825)<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>"
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(825)<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>";
    "(825)<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>"->"<java.lang.Object: void <init>()>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(510)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<java.util.ArrayList: int size()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Throwable: void <clinit>()>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <clinit>()>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.lang.Short: short shortValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: short shortValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: short shortValue()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"(884)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(755)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>"
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(685)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(142)<org.joda.time.field.PreciseDurationField: int hashCode()>"
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(142)<org.joda.time.field.PreciseDurationField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>";
    "(155)<org.joda.time.field.MillisDurationField: int hashCode()>"
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(155)<org.joda.time.field.MillisDurationField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(147)<org.joda.time.field.ScaledDurationField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>";
    "(155)<org.joda.time.field.MillisDurationField: int hashCode()>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(142)<org.joda.time.field.PreciseDurationField: int hashCode()>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(142)<org.joda.time.field.PreciseDurationField: int hashCode()>"->"(278)<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(98)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>"
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"(98)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>";
    "(98)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>";
    "<java.lang.Enum: boolean equals(java.lang.Object)>"
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<java.lang.Enum: boolean equals(java.lang.Object)>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(67)<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(51)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(52)<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(50)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(52)<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>"
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(2274)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2274)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"
    "(2274)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"->"(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"
    "(2274)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"->"(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.System: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Throwable: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Class: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(40)<org.joda.time.tz.DefaultNameProvider: void <init>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"(40)<org.joda.time.tz.DefaultNameProvider: void <init>()>";
    "(40)<org.joda.time.tz.DefaultNameProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"
    "(40)<org.joda.time.tz.DefaultNameProvider: void <init>()>"->"(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "(40)<org.joda.time.tz.DefaultNameProvider: void <init>()>"->"(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.util.HashMap: void <clinit>()>";
    "(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.lang.Object: void <clinit>()>";
    "(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.util.HashMap: void <init>(int)>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(47)<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>"
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(47)<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"
    "(47)<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>"->"(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Class: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.text.DateFormatSymbols: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.text.DateFormatSymbols: void <init>(java.util.Locale)>";
    "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(106)<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(106)<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "(106)<org.joda.time.tz.DefaultNameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Locale: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(35)<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(45)<org.joda.time.UTCDateTimeZone: int getStandardOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(52)<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>"
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(52)<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>";
    "(52)<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>"->"(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>";
    "(111)<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(111)<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "(111)<org.joda.time.tz.DefaultNameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(35)<org.joda.time.UTCDateTimeZone: java.lang.String getNameKey(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "<java.lang.StringBuffer: void <init>(int)>"
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>"
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(147)<org.joda.time.field.ScaledDurationField: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(142)<org.joda.time.field.PreciseDurationField: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(155)<org.joda.time.field.MillisDurationField: int hashCode()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>";
    "<java.lang.Math: int min(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.Collections: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.LinkedHashMap: void <init>()>"
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.LinkedHashMap: void <init>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "<java.lang.String: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(220)<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(220)<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>";
    "<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>";
    "<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(220)<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>";
    "(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>"
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>";
    "(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"
    "(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"->"(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>";
    "(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)>";
    "(56)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)>";
    "(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <init>()>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"
    "(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>"->"(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>";
    "(56)<org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>";
    "(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>";
    "(56)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>";
    "(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(56)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <clinit>()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"
    "(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>"->"(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"
    "(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(543)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"
    "(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"->"(543)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>";
    "(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>"
    "(543)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"->"(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>"
    "(543)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(543)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>"->"(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>"->"(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>"->"(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>";
    "(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(561)<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>"
    "(366)<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>"->"(561)<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>";
    "(238)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYearDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(238)<org.joda.time.chrono.GregorianChronology: long getAverageMillisPerYearDividedByTwo()>";
    "(246)<org.joda.time.chrono.GregorianChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(246)<org.joda.time.chrono.GregorianChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"
    "(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>"->"(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(543)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"
    "(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"->"(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>";
    "(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"
    "(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"
    "(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>"->"(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(512)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>"
    "(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"->"(512)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "(512)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"
    "(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"->"(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>";
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>";
    "(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>"->"(561)<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>";
    "(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"
    "(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>"->"(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>"->"(155)<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>"->"(155)<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: void <init>()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>";
    "(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>";
    "(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(int)>"
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"->"<java.lang.String: void <clinit>()>";
    "(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"->"<java.lang.String: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getEras()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getEras()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getMonths()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getMonths()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: java.lang.String intern()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<java.util.Locale: java.lang.String getLanguage()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.Locale: java.lang.String getLanguage()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <init>()>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(512)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>"
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "<java.lang.Math: int abs(int)>"
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Math: int abs(int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>"
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"
    "(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Math: long abs(long)>"
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Math: long abs(long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: void <init>()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>"
    "(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: int abs(int)>";
    "<java.lang.Math: float signum(float)>"
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: float signum(float)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: float signum(float)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"
    "(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>"
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(121)<org.joda.time.field.MillisDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(121)<org.joda.time.field.MillisDurationField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(121)<org.joda.time.field.MillisDurationField: long add(long,long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: void <init>()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.Object: void <clinit>()>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.Throwable: void <clinit>()>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.Object: void <clinit>()>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"(57)<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"(50)<org.joda.time.UTCDateTimeZone: int getOffsetFromLocal(long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(561)<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(485)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(485)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>";
    "(485)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(485)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(164)<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(164)<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(97)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>"
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(97)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(93)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(93)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(112)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValueForSet(long,int)>"
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(112)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValueForSet(long,int)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>"
    "(112)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValueForSet(long,int)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>"->"(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>";
    "(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"
    "(93)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"
    "(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>";
    "(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(93)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"->"(334)<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "(139)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMaxForSet(long,int)>"
    "(97)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>"->"(139)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMaxForSet(long,int)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"
    "(139)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMaxForSet(long,int)>"->"(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"
    "(164)<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>"
    "(164)<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(164)<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(164)<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>"->"(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(236)<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>"
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(236)<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(251)<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>"
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(251)<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(117)<org.joda.time.field.MillisDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(117)<org.joda.time.field.MillisDurationField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(117)<org.joda.time.field.MillisDurationField: long add(long,int)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>";
    "(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>";
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(54)<org.joda.time.field.PreciseDurationField: boolean isPrecise()>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>"
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"
    "(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>"
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>"
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(57)<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>"->"(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>";
    "(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"
    "(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"(202)<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(38)<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>"
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"
    "(38)<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>"->"(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.HashMap$HashIterator: boolean hasNext()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "<java.util.HashMap$KeyIterator: java.lang.Object next()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(32)<org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>"
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"
    "(32)<org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>"->"(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "<java.util.TreeMap$Entry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "<java.util.TreeMap$Entry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1026)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>"
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(1026)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>";
    "(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>";
    "(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "(1011)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>"
    "(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"->"(1011)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>";
    "(1015)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>"
    "(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"->"(1015)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: void <clinit>()>";
    "(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.lang.Object: void <init>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(914)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(914)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>"
    "(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>"->"<java.lang.String: int length()>";
    "(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"
    "(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Throwable: void <clinit>()>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Throwable: void <clinit>()>";
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Object: void <clinit>()>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Throwable: void <clinit>()>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Object: void <clinit>()>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<java.util.LinkedList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedList: int size()>";
    "<java.util.LinkedList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"->"(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"->"(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"->"(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"->"(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>";
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>"
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>";
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>"
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>";
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>"
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>";
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Object: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Long: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3600()>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>"
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$100()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$000()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1300()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1100()>"->"<java.lang.Object: void <clinit>()>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Object: void <clinit>()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.Throwable: void <clinit>()>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<java.lang.StringBuilder: java.lang.Appendable append(char)>"
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(185)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>"
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(185)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>";
    "(209)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToText(int)>"
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(209)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToText(int)>";
    "(169)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String eraValueToText(int)>"
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(169)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String eraValueToText(int)>";
    "(233)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String halfdayValueToText(int)>"
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"(233)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String halfdayValueToText(int)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>"
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(189)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>";
    "(213)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToShortText(int)>"
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(213)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToShortText(int)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Long: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Integer: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(589)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>"
    "(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>"->"(589)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>";
    "(589)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>"->"(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "<java.util.HashSet: boolean remove(java.lang.Object)>"
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"<java.lang.Object: void <clinit>()>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"->"(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"
    "(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"->"(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>";
    "(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"->"(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>";
    "(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"->"(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: int size()>";
    "<java.util.HashSet: boolean contains(java.lang.Object)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: int size()>";
    "<java.util.HashSet: void <init>(java.util.Collection)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: void <init>(java.util.Collection)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: boolean retainAll(java.util.Collection)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.ArrayList: boolean retainAll(java.util.Collection)>";
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>"
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>";
    "(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.Throwable: void <clinit>()>";
    "(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.IllegalStateException: void <init>(java.lang.String)>"
    "(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>"
    "(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"
    "(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>"->"(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>";
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1358)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"(1358)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(1358)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <init>()>";
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>"
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>";
    "(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>"
    "(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Throwable: void <clinit>()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(1861)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>"
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1861)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>";
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.String: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: int size()>";
    "<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: void <init>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <init>()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"
    "(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>"->"(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <init>()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<java.util.Collections: void reverse(java.util.List)>"
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.Collections: void reverse(java.util.List)>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.Collections: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<java.util.TreeSet: boolean add(java.lang.Object)>"
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "<java.util.TreeSet: void <init>(java.util.Comparator)>"
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: void <init>(java.util.Comparator)>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <init>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1925)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Throwable: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>";
    "(1909)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(1909)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)>";
    "(1909)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(1909)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.lang.Object: void <init>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"
    "(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"->"(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void <clinit>()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.lang.Object: void <clinit>()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.lang.Object: void <clinit>()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.ArrayList: void clear()>"
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void clear()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>";
    "(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.Throwable: void <clinit>()>";
    "(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.Object: void <clinit>()>";
    "(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.Throwable: void <clinit>()>";
    "(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(464)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "(469)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>"
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(469)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: void <init>()>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(40)<org.joda.time.UTCDateTimeZone: int getOffset(long)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(464)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"
    "(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>";
    "(318)<org.joda.time.YearMonthDay: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(387)<org.joda.time.YearMonth: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(334)<org.joda.time.Partial: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(334)<org.joda.time.Partial: int size()>";
    "(395)<org.joda.time.MonthDay: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(539)<org.joda.time.LocalDateTime: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(429)<org.joda.time.TimeOfDay: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(486)<org.joda.time.LocalDate: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(535)<org.joda.time.LocalTime: int size()>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"
    "(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"
    "(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"
    "(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"
    "(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>"
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>";
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1246)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$300()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>"
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>";
    "(399)<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>"
    "(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>"->"(399)<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"
    "(399)<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(54)<org.joda.time.base.AbstractPartial: void <init>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(105)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(105)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(105)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>";
    "(105)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(105)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int)>"->"(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(358)<org.joda.time.Partial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(358)<org.joda.time.Partial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(138)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(138)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(138)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(138)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(334)<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"<java.lang.Object: void <clinit>()>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(138)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>";
    "(225)<org.joda.time.base.BasePartial: int getValue(int)>"
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"(170)<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(354)<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(334)<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(129)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(129)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(129)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(129)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(660)<org.joda.time.LocalTime: long getLocalMillis()>"
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(660)<org.joda.time.LocalTime: long getLocalMillis()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(651)<org.joda.time.LocalDateTime: long getLocalMillis()>"
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(393)<org.joda.time.Partial: int getValue(int)>"
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"
    "(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(660)<org.joda.time.LocalTime: long getLocalMillis()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(660)<org.joda.time.LocalTime: long getLocalMillis()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(660)<org.joda.time.LocalTime: long getLocalMillis()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(660)<org.joda.time.LocalTime: long getLocalMillis()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"->"(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(334)<org.joda.time.Partial: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(160)<org.joda.time.base.AbstractPartial: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(622)<org.joda.time.LocalDateTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(150)<org.joda.time.base.AbstractPartial: int get(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(44)<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"
    "(44)<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>"->"(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>"->"(204)<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>"->"(204)<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>"->"(204)<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>"->"(204)<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"
    "(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(608)<org.joda.time.PeriodType: java.lang.String getName()>"
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"(608)<org.joda.time.PeriodType: java.lang.String getName()>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>"
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>"
    "(50)<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>"->"(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(652)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Object: void <clinit>()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Object: void <clinit>()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(44)<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: void <init>()>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(215)<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(215)<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "(225)<org.joda.time.base.BaseInterval: long getStartMillis()>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(225)<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "(235)<org.joda.time.base.BaseInterval: long getEndMillis()>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(235)<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(44)<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>"
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>"
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(44)<org.joda.time.chrono.GregorianChronology: java.lang.String toString()>";
    "(769)<org.joda.time.Partial: java.lang.String toString()>"
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"
    "(769)<org.joda.time.Partial: java.lang.String toString()>"->"(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"
    "(769)<org.joda.time.Partial: java.lang.String toString()>"->"(794)<org.joda.time.Partial: java.lang.String toStringList()>";
    "(769)<org.joda.time.Partial: java.lang.String toString()>"->"(794)<org.joda.time.Partial: java.lang.String toStringList()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>";
    "<java.util.Arrays: java.util.List asList(java.lang.Object[])>"
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.Arrays: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: void <clinit>()>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.Object: void <clinit>()>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"(334)<org.joda.time.Partial: int size()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: int size()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"(334)<org.joda.time.Partial: int size()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: int length()>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: void setLength(int)>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void setLength(int)>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: int length()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>()>";
    "(115)<org.joda.time.base.BaseDuration: long getMillis()>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"(115)<org.joda.time.base.BaseDuration: long getMillis()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(49)<org.joda.time.chrono.JulianChronology: java.lang.String toString()>"
    "(49)<org.joda.time.chrono.JulianChronology: java.lang.String toString()>"->"(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>";
    "(1046)<org.joda.time.TimeOfDay$Property: org.joda.time.DateTimeField getField()>"
    "(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"(1046)<org.joda.time.TimeOfDay$Property: org.joda.time.DateTimeField getField()>";
    "(875)<org.joda.time.Partial$Property: org.joda.time.DateTimeField getField()>"
    "(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"(875)<org.joda.time.Partial$Property: org.joda.time.DateTimeField getField()>";
    "(961)<org.joda.time.YearMonthDay$Property: org.joda.time.DateTimeField getField()>"
    "(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"(961)<org.joda.time.YearMonthDay$Property: org.joda.time.DateTimeField getField()>";
    "(853)<org.joda.time.MonthDay$Property: org.joda.time.DateTimeField getField()>"
    "(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"(853)<org.joda.time.MonthDay$Property: org.joda.time.DateTimeField getField()>";
    "(864)<org.joda.time.YearMonth$Property: org.joda.time.DateTimeField getField()>"
    "(69)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>"->"(864)<org.joda.time.YearMonth$Property: org.joda.time.DateTimeField getField()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(65)<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>"
    "(65)<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>"->"(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<java.lang.Object: void <clinit>()>";
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>";
    "(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<java.lang.Object: void <clinit>()>";
    "(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>";
    "(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<java.lang.Object: void <clinit>()>";
    "(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(29)<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(29)<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>";
    "(29)<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>"->"<java.lang.Object: void <init>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(1475)<org.joda.time.LocalDate: int getYear()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(144)<org.joda.time.Instant: org.joda.time.Instant toInstant()>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(144)<org.joda.time.Instant: org.joda.time.Instant toInstant()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(50)<org.joda.time.chrono.CopticChronology: java.lang.String toString()>"
    "(50)<org.joda.time.chrono.CopticChronology: java.lang.String toString()>"->"(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>";
    "(1265)<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(1265)<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>";
    "(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(2124)<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(2124)<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>";
    "(1936)<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(1936)<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>";
    "(1402)<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(1402)<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>";
    "(2192)<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(2192)<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Throwable: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"
    "(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"->"(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>";
    "(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>"
    "(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"->"(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"
    "(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>"->"(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"
    "(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(962)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(962)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>";
    "(962)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>"
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>"
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>";
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(254)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYear()>"
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(254)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYear()>";
    "(262)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerMonth()>"
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(262)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerMonth()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(254)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYear()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(176)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(188)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(208)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(200)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(212)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(216)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(252)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>"
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(258)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYearDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(258)<org.joda.time.chrono.JulianChronology: long getAverageMillisPerYearDividedByTwo()>";
    "(266)<org.joda.time.chrono.JulianChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(266)<org.joda.time.chrono.JulianChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(224)<org.joda.time.chrono.JulianChronology: long calculateFirstDayOfYearMillis(int)>"
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"(224)<org.joda.time.chrono.JulianChronology: long calculateFirstDayOfYearMillis(int)>";
    "(224)<org.joda.time.chrono.JulianChronology: long calculateFirstDayOfYearMillis(int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(651)<org.joda.time.LocalDate: int hashCode()>"
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"
    "(651)<org.joda.time.LocalDate: int hashCode()>"->"(280)<org.joda.time.base.AbstractPartial: int hashCode()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>"
    "(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "(483)<org.joda.time.base.AbstractInterval: int hashCode()>"
    "(483)<org.joda.time.base.AbstractInterval: int hashCode()>"->"(225)<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "(483)<org.joda.time.base.AbstractInterval: int hashCode()>"->"(235)<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "(483)<org.joda.time.base.AbstractInterval: int hashCode()>"->"(215)<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "(171)<org.joda.time.base.AbstractDuration: int hashCode()>"
    "(171)<org.joda.time.base.AbstractDuration: int hashCode()>"->"(115)<org.joda.time.base.BaseDuration: long getMillis()>";
    "(49)<org.joda.time.chrono.JulianChronology: int hashCode()>"
    "(49)<org.joda.time.chrono.JulianChronology: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"
    "(1073)<org.joda.time.TimeOfDay$Property: int get()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(1073)<org.joda.time.TimeOfDay$Property: int get()>";
    "(902)<org.joda.time.Partial$Property: int get()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(902)<org.joda.time.Partial$Property: int get()>";
    "(988)<org.joda.time.YearMonthDay$Property: int get()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(988)<org.joda.time.YearMonthDay$Property: int get()>";
    "(880)<org.joda.time.MonthDay$Property: int get()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(880)<org.joda.time.MonthDay$Property: int get()>";
    "(891)<org.joda.time.YearMonth$Property: int get()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(891)<org.joda.time.YearMonth$Property: int get()>";
    "(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "(1055)<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(1055)<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(884)<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(884)<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(970)<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(970)<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(862)<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(862)<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(873)<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(873)<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(1046)<org.joda.time.TimeOfDay$Property: org.joda.time.DateTimeField getField()>";
    "(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(875)<org.joda.time.Partial$Property: org.joda.time.DateTimeField getField()>";
    "(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(961)<org.joda.time.YearMonthDay$Property: org.joda.time.DateTimeField getField()>";
    "(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(853)<org.joda.time.MonthDay$Property: org.joda.time.DateTimeField getField()>";
    "(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(864)<org.joda.time.YearMonth$Property: org.joda.time.DateTimeField getField()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(334)<org.joda.time.Partial: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "(487)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>"
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(487)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>";
    "(207)<org.joda.time.base.AbstractPeriod: int hashCode()>"
    "(207)<org.joda.time.base.AbstractPeriod: int hashCode()>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>"
    "(207)<org.joda.time.base.AbstractPeriod: int hashCode()>"->"(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "(207)<org.joda.time.base.AbstractPeriod: int hashCode()>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(207)<org.joda.time.base.AbstractPeriod: int hashCode()>"->"(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "(207)<org.joda.time.base.AbstractPeriod: int hashCode()>"->"(278)<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>"
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(50)<org.joda.time.chrono.CopticChronology: int hashCode()>"
    "(50)<org.joda.time.chrono.CopticChronology: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(317)<org.joda.time.base.BaseSingleFieldPeriod: int hashCode()>"->"(278)<org.joda.time.DurationFieldType$StandardDurationFieldType: int hashCode()>";
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "(1284)<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(1284)<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>";
    "(1341)<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(1341)<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>";
    "(2143)<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(2143)<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>";
    "(1955)<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(1955)<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>";
    "(1421)<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(1421)<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>";
    "(2211)<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(2211)<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(1265)<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(2124)<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(1936)<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(1402)<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(2192)<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1265)<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField getField()>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(2124)<org.joda.time.DateTime$Property: org.joda.time.DateTimeField getField()>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1936)<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField getField()>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1402)<org.joda.time.LocalTime$Property: org.joda.time.DateTimeField getField()>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(2192)<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(1274)<org.joda.time.DateMidnight$Property: long getMillis()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1274)<org.joda.time.DateMidnight$Property: long getMillis()>";
    "(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>";
    "(2133)<org.joda.time.DateTime$Property: long getMillis()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(2133)<org.joda.time.DateTime$Property: long getMillis()>";
    "(1945)<org.joda.time.LocalDate$Property: long getMillis()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1945)<org.joda.time.LocalDate$Property: long getMillis()>";
    "(1411)<org.joda.time.LocalTime$Property: long getMillis()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(1411)<org.joda.time.LocalTime$Property: long getMillis()>";
    "(2201)<org.joda.time.LocalDateTime$Property: long getMillis()>"
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(2201)<org.joda.time.LocalDateTime$Property: long getMillis()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"
    "(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>";
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(56)<org.joda.time.base.AbstractPeriod: int size()>"->"(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "<java.nio.CharBuffer: int length()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "<java.lang.StringBuffer: char charAt(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "<java.nio.CharBuffer: char charAt(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "<java.nio.CharBuffer: java.lang.String toString()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(76)<org.joda.time.LocalTime: int compareTo(java.lang.Object)>"
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"
    "(76)<org.joda.time.LocalTime: int compareTo(java.lang.Object)>"->"(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Throwable: void <clinit>()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Throwable: void <clinit>()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassCastException: void <init>(java.lang.String)>"
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.ClassCastException: void <init>(java.lang.String)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.ClassCastException: void <init>(java.lang.String)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(334)<org.joda.time.Partial: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(334)<org.joda.time.Partial: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(334)<org.joda.time.Partial: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(82)<org.joda.time.LocalDate: int compareTo(java.lang.Object)>"
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"
    "(82)<org.joda.time.LocalDate: int compareTo(java.lang.Object)>"->"(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "(80)<org.joda.time.LocalDateTime: int compareTo(java.lang.Object)>"
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"
    "(80)<org.joda.time.LocalDateTime: int compareTo(java.lang.Object)>"->"(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "(34)<org.joda.time.field.DelegatedDurationField: int compareTo(java.lang.Object)>"
    "(150)<org.joda.time.field.DelegatedDurationField: int compareTo(org.joda.time.DurationField)>"
    "(34)<org.joda.time.field.DelegatedDurationField: int compareTo(java.lang.Object)>"->"(150)<org.joda.time.field.DelegatedDurationField: int compareTo(org.joda.time.DurationField)>";
    "(38)<org.joda.time.base.AbstractDuration: int compareTo(java.lang.Object)>"
    "(93)<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>"
    "(38)<org.joda.time.base.AbstractDuration: int compareTo(java.lang.Object)>"->"(93)<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>";
    "(93)<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>"->"(115)<org.joda.time.base.BaseDuration: long getMillis()>";
    "(55)<org.joda.time.base.AbstractInstant: int compareTo(java.lang.Object)>"
    "(296)<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"
    "(55)<org.joda.time.base.AbstractInstant: int compareTo(java.lang.Object)>"->"(296)<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>";
    "(296)<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(296)<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(46)<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"
    "(46)<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>";
    "(46)<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>";
    "(46)<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>";
    "(46)<org.joda.time.base.AbstractPartial: int compareTo(java.lang.Object)>"->"(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>";
    "(46)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(java.lang.Object)>"
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"
    "(46)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(java.lang.Object)>"->"(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Throwable: void <clinit>()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: void <init>()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.ClassCastException: void <init>(java.lang.String)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>";
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>"
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"
    "(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>"
    "(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(225)<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(235)<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(215)<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "(154)<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>"
    "(154)<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>"->"(115)<org.joda.time.base.BaseDuration: long getMillis()>";
    "(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>"
    "(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(1073)<org.joda.time.TimeOfDay$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(902)<org.joda.time.Partial$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(988)<org.joda.time.YearMonthDay$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(880)<org.joda.time.MonthDay$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(891)<org.joda.time.YearMonth$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(1055)<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(884)<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(970)<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(862)<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(873)<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(334)<org.joda.time.Partial: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(334)<org.joda.time.Partial: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: boolean equals(java.lang.Object)>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>"
    "(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>";
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>";
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>";
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>";
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>";
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>";
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>";
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>";
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>";
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>";
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>";
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>";
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>";
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1284)<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1341)<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(2143)<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1955)<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1421)<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(2211)<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>"
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(146)<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(334)<org.joda.time.Partial: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(311)<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(93)<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>"->"(115)<org.joda.time.base.BaseDuration: long getMillis()>";
    "(296)<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(296)<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuffer: int length()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.nio.CharBuffer: int length()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuilder: int length()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>";
    "(38)<org.joda.time.chrono.GJCacheKey: int hashCode()>"
    "(38)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(38)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(38)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(38)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(80)<org.joda.time.UTCDateTimeZone: int hashCode()>";
    "(38)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(279)<org.joda.time.base.AbstractInstant: int hashCode()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<sun.util.LocaleServiceProviderPool: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.util.LocaleServiceProviderPool: void <clinit>()>";
    "<java.util.Currency: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.util.Currency: void <clinit>()>";
    "<sun.security.ec.ECKeyFactory: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.security.ec.ECKeyFactory: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.util.LocaleServiceProviderPool: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.util.Currency: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.security.ec.ECKeyFactory: void <clinit>()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>"
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>";
    "(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.util.ArrayList: java.util.List subList(int,int)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.util.List subList(int,int)>";
    "<java.util.ArrayList$SubList: int size()>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.ArrayList$SubList: java.lang.Object get(int)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<java.util.ArrayList$SubList: java.util.List subList(int,int)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.util.List subList(int,int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: void clear()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.AbstractList: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: void clear()>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"->"<java.lang.String: void <clinit>()>";
    "(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: void <clinit>()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(769)<org.joda.time.Partial: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(65)<org.joda.time.chrono.IslamicChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(225)<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(235)<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(215)<org.joda.time.base.BaseInterval: org.joda.time.Chronology getChronology()>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(154)<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>"->"(115)<org.joda.time.base.BaseDuration: long getMillis()>";
    "(242)<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"
    "(167)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>"
    "(242)<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"(167)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>";
    "(242)<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"(167)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>";
    "(176)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>"
    "(242)<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"(176)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>";
    "(242)<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>"->"(176)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(1073)<org.joda.time.TimeOfDay$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(902)<org.joda.time.Partial$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(988)<org.joda.time.YearMonthDay$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(880)<org.joda.time.MonthDay$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(891)<org.joda.time.YearMonth$Property: int get()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(60)<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(1055)<org.joda.time.TimeOfDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(884)<org.joda.time.Partial$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(970)<org.joda.time.YearMonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(862)<org.joda.time.MonthDay$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(873)<org.joda.time.YearMonth$Property: org.joda.time.ReadablePartial getReadablePartial()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(318)<org.joda.time.YearMonthDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(387)<org.joda.time.YearMonth: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(334)<org.joda.time.Partial: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(395)<org.joda.time.MonthDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(539)<org.joda.time.LocalDateTime: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(486)<org.joda.time.LocalDate: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(535)<org.joda.time.LocalTime: int size()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(393)<org.joda.time.Partial: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(577)<org.joda.time.LocalDateTime: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(524)<org.joda.time.LocalDate: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(574)<org.joda.time.LocalTime: int getValue(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(369)<org.joda.time.Partial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(79)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(346)<org.joda.time.Partial: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(669)<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>";
    "(203)<org.joda.time.base.BaseSingleFieldPeriod: int size()>"
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(203)<org.joda.time.base.BaseSingleFieldPeriod: int size()>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>"->"(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.String: void <clinit>()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.String: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1284)<org.joda.time.DateMidnight$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1341)<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(2143)<org.joda.time.DateTime$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1955)<org.joda.time.LocalDate$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(1421)<org.joda.time.LocalTime$Property: org.joda.time.Chronology getChronology()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(2211)<org.joda.time.LocalDateTime$Property: org.joda.time.Chronology getChronology()>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(153)<org.joda.time.chrono.BasicGJChronology: long getYearDifference(long,long)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>"
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>"
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(93)<org.joda.time.chrono.BasicGJChronology: int getMonthOfYear(long,int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(80)<org.joda.time.field.SkipDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(80)<org.joda.time.field.SkipDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: char toLowerCase(char)>"
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toLowerCase(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toLowerCase(char)>";
    "<java.lang.Character: char toUpperCase(char)>"
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1657)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toLowerCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toLowerCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Throwable: void <clinit>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>";
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>";
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>";
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>"
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>"
    "(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: void <init>(int)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>(int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(205)<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(205)<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>";
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>";
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "(560)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>"
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"(560)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Locale: java.lang.String getLanguage()>";
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(273)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>"
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(273)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(273)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(195)<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>"
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(195)<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>";
    "(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>";
    "(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"->"(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"->"(553)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(63)<org.joda.time.field.PreciseDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRL: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferRB: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.StringCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferL: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.ByteBufferAsCharBufferB: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBuffer: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRS: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferRU: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.HeapCharBufferR: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferS: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.DirectCharBufferU: java.lang.CharSequence subSequence(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Math: int min(int,int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.String: int length()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.String: char charAt(int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuffer: int length()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.nio.CharBuffer: int length()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuilder: int length()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuffer: char charAt(int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.nio.CharBuffer: char charAt(int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.StringBuilder: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(201)<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>"
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(201)<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>";
    "(225)<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxTextLength()>"
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(225)<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxTextLength()>";
    "(181)<org.joda.time.chrono.GJLocaleSymbols: int getEraMaxTextLength()>"
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(181)<org.joda.time.chrono.GJLocaleSymbols: int getEraMaxTextLength()>";
    "(247)<org.joda.time.chrono.GJLocaleSymbols: int getHalfdayMaxTextLength()>"
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"(247)<org.joda.time.chrono.GJLocaleSymbols: int getHalfdayMaxTextLength()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.String: int length()>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(72)<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(475)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>"
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(475)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>";
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(487)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: int hashCode()>";
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(62)<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>";
    "(99)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getName()>"
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(99)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getName()>";
    "(81)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>"->"(98)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>";
    "(99)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getName()>"->"(390)<org.joda.time.DateTimeFieldType: java.lang.String getName()>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>"
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(180)<org.joda.time.chrono.BasicGJChronology: long setYear(long,int)>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(230)<org.joda.time.chrono.GregorianChronology: int getMaxYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(226)<org.joda.time.chrono.GregorianChronology: int getMinYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(67)<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(51)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(52)<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(50)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(216)<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>";
    "(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>"
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"
    "(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>";
    "(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>"->"(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Integer: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>";
    "(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(250)<org.joda.time.chrono.JulianChronology: int getMaxYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(246)<org.joda.time.chrono.JulianChronology: int getMinYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>"
    "(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>"
    "(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(101)<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>"
    "(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"(101)<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>";
    "(364)<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>"
    "(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>"->"(364)<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>";
    "(220)<org.joda.time.chrono.CopticChronology: long calculateFirstDayOfYearMillis(int)>"
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"(220)<org.joda.time.chrono.CopticChronology: long calculateFirstDayOfYearMillis(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>";
    "(219)<org.joda.time.chrono.EthiopicChronology: long calculateFirstDayOfYearMillis(int)>"
    "(782)<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>"->"(219)<org.joda.time.chrono.EthiopicChronology: long calculateFirstDayOfYearMillis(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.chrono.EthiopicChronology: long calculateFirstDayOfYearMillis(int)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(220)<org.joda.time.chrono.CopticChronology: long calculateFirstDayOfYearMillis(int)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(143)<org.joda.time.chrono.BasicFixedMonthChronology: int getMaxMonth()>"
    "(726)<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>"->"(143)<org.joda.time.chrono.BasicFixedMonthChronology: int getMaxMonth()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>";
    "(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.Appendable append(char)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(44)<org.joda.time.chrono.GregorianChronology: int hashCode()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1157)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>"->"(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(71)<org.joda.time.field.MillisDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(80)<org.joda.time.field.MillisDurationField: long getUnitMillis()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(157)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(161)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getUnitMillis()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>"
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"
    "(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"->"(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>";
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"
    "(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"->"(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>";
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"
    "(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"->"(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"
    "(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"->"(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>"
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"
    "(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>"
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"
    "(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>"
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>"
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Throwable: void <clinit>()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Throwable: void <clinit>()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Throwable: void <clinit>()>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(532)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(532)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "(532)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(52)<org.joda.time.base.AbstractDateTime: void <init>()>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(294)<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis0(int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(44)<org.joda.time.chrono.GregorianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(532)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(532)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(59)<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>"
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"(59)<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>";
    "(59)<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(97)<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>"
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(97)<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>";
    "(97)<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(543)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>"
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(543)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.base.AbstractInstant: boolean isBefore(long)>"
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"(357)<org.joda.time.base.AbstractInstant: boolean isBefore(long)>";
    "(357)<org.joda.time.base.AbstractInstant: boolean isBefore(long)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(532)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>"
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>"->"<java.lang.Object: void <init>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>";
    "(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>";
    "(146)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(146)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(146)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "(146)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(146)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"
    "(146)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime()>"->"(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(44)<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"->"(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"
    "(264)<org.joda.time.base.BaseDateTime: void adjustForMinMax()>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(122)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(279)<org.joda.time.base.AbstractInstant: int hashCode()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.CopticChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(65)<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(49)<org.joda.time.chrono.JulianChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.CopticChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(65)<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(49)<org.joda.time.chrono.JulianChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.CopticChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(65)<org.joda.time.chrono.IslamicChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(49)<org.joda.time.chrono.JulianChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(50)<org.joda.time.chrono.EthiopicChronology: java.lang.String toString()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "(268)<org.joda.time.chrono.ZonedChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Throwable: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<java.lang.Object: void <clinit>()>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<java.lang.Object: void <clinit>()>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(319)<org.joda.time.chrono.AssembledChronology: void setFields()>"->"(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <clinit>()>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"<java.lang.Object: void <clinit>()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"
    "(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"<java.lang.Object: void <clinit>()>";
    "(54)<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>"
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(54)<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(54)<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"
    "(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"->"(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>";
    "(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <init>()>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.lang.Object: void <clinit>()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(103)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(119)<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(48)<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(132)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(95)<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(52)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(57)<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(209)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(221)<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(59)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(67)<org.joda.time.field.PreciseDurationDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(51)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(52)<org.joda.time.chrono.GJEraDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(50)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>"
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>"
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(90)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>"
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(90)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(158)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerMonth()>"
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(158)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerMonth()>";
    "(445)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerMonth()>"
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(445)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerMonth()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(143)<org.joda.time.chrono.BasicFixedMonthChronology: int getMaxMonth()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>"
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(132)<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(113)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(84)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>"
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(148)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYear()>"
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(148)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYear()>";
    "(435)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYear()>"
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(435)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYear()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(148)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYear()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(435)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYear()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(576)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>"
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"(576)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(279)<org.joda.time.base.AbstractInstant: int hashCode()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(314)<org.joda.time.base.AbstractDateTime: java.lang.String toString()>";
    "(543)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>"
    "(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>"->"(543)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(429)<org.joda.time.TimeOfDay: int size()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(64)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(88)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(138)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(129)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(140)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(38)<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(62)<org.joda.time.field.MillisDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(32)<org.joda.time.field.MillisDurationField: int compareTo(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<java.lang.Enum: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<java.util.Vector: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Vector: java.lang.Object clone()>";
    "<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "<sun.net.ProgressSource: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<java.util.HashMap: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<sun.util.calendar.CalendarDate: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<java.text.DigitList: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<java.security.Signature$Delegate: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<java.util.BitSet: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<java.util.TreeSet: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<java.util.Hashtable: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<java.util.ArrayDeque: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "<java.text.DecimalFormatSymbols: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<java.security.SignatureSpi: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<sun.security.krb5.EncryptionKey: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "<java.util.Hashtable$Entry: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<java.util.Locale: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Locale: java.lang.Object clone()>";
    "<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<sun.security.krb5.PrincipalName: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "<java.util.HashSet: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<java.text.RuleBasedCollator: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<java.text.StringCharacterIterator: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<sun.security.krb5.EncryptedData: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "<sun.net.www.MimeEntry: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "<java.util.EnumSet: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "<java.util.AbstractMap: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<javax.naming.Reference: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "<java.text.RuleBasedBreakIterator: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<java.lang.Thread: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<java.util.GregorianCalendar: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<sun.security.util.BitArray: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<sun.text.IntHashtable: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<java.text.DateFormatSymbols: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<java.util.JumboEnumSet: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "<java.text.ChoiceFormat: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "<java.util.zip.ZipEntry: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<sun.text.CompactByteArray: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<java.util.JapaneseImperialCalendar: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<java.util.TreeMap: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<java.util.SimpleTimeZone: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<sun.security.krb5.internal.PAData: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "<sun.security.krb5.Realm: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "<java.util.jar.Manifest: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<java.util.LinkedList: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<java.util.Date: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Date: java.lang.Object clone()>";
    "<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<sun.security.krb5.internal.Ticket: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "<sun.security.provider.MD4: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "<java.security.MessageDigest$Delegate: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<javax.crypto.Mac: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "<java.text.SimpleDateFormat: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "<java.util.IdentityHashMap: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "<java.net.HttpCookie: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<java.util.jar.Attributes: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<sun.util.calendar.ZoneInfo: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<java.text.MessageFormat: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<java.text.DecimalFormat: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<java.util.ArrayList: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<javax.naming.CompositeName: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "<java.util.AbstractMap$1$1: boolean hasNext()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "<java.util.AbstractMap$1$1: java.lang.Object next()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(2081)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(2081)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(837)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>"
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(837)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(837)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>";
    "(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>";
    "(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>";
    "(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(846)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>"
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"(846)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>";
    "(846)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<java.util.Vector: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector: int size()>";
    "<java.util.SubList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.SubList: int size()>";
    "<java.util.Collections$SynchronizedCollection: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "<java.util.Collections$CheckedCollection: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "<java.util.Collections$EmptyList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$CopiesList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.Arrays$ArrayList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayList: int size()>";
    "<sun.security.jca.ProviderList$ServiceList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "<sun.security.jca.ProviderList$3: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "<java.util.Collections$SingletonList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SingletonList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.Vector: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "<java.util.SubList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.SubList: java.lang.Object get(int)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "<java.util.Collections$EmptyList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "<java.util.Collections$CopiesList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "<java.util.Arrays$ArrayList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "<sun.security.jca.ProviderList$ServiceList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$ServiceList: java.lang.Object get(int)>";
    "<sun.security.jca.ProviderList$3: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$3: java.lang.Object get(int)>";
    "<java.util.Collections$SingletonList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.security.Provider: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>"
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(79)<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>"
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(79)<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>"
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(197)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>"
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(192)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>"
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(183)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(117)<org.joda.time.field.MillisDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>"
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(187)<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(121)<org.joda.time.field.MillisDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(120)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>";
    "(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(151)<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(111)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(100)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(136)<org.joda.time.chrono.GJEraDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(104)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(56)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(61)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(80)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>"
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>"
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(127)<org.joda.time.field.PreciseDurationDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(145)<org.joda.time.chrono.BasicYearDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(244)<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(76)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>"
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(131)<org.joda.time.chrono.BasicYearDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(66)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>"
    "(485)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>"
    "(485)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>"
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"(101)<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>";
    "(495)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>"->"(364)<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>";
    "(153)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYearDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(153)<org.joda.time.chrono.BasicFixedMonthChronology: long getAverageMillisPerYearDividedByTwo()>";
    "(254)<org.joda.time.chrono.CopticChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(254)<org.joda.time.chrono.CopticChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(440)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYearDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(440)<org.joda.time.chrono.IslamicChronology: long getAverageMillisPerYearDividedByTwo()>";
    "(486)<org.joda.time.chrono.IslamicChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(486)<org.joda.time.chrono.IslamicChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(253)<org.joda.time.chrono.EthiopicChronology: long getApproxMillisAtEpochDividedByTwo()>"
    "(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>"->"(253)<org.joda.time.chrono.EthiopicChronology: long getApproxMillisAtEpochDividedByTwo()>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.chrono.BasicWeekyearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>"
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(110)<org.joda.time.field.PreciseDurationDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(135)<org.joda.time.chrono.BasicYearDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(73)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(168)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(178)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"(101)<org.joda.time.chrono.BasicFixedMonthChronology: long getTotalMillisByYearMonth(int,int)>";
    "(398)<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>"->"(364)<org.joda.time.chrono.IslamicChronology: long getTotalMillisByYearMonth(int,int)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(132)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long)>"
    "(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"->"(132)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long)>";
    "(132)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long)>"->"(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(462)<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(161)<org.joda.time.field.DelegatedDurationField: int hashCode()>"
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(161)<org.joda.time.field.DelegatedDurationField: int hashCode()>";
    "(154)<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>"
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(154)<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(90)<org.joda.time.field.DelegatedDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(34)<org.joda.time.field.DelegatedDurationField: int compareTo(java.lang.Object)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<sun.security.provider.MD4: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.security.provider.MD4: void <clinit>()>";
    "<sun.security.provider.DigestBase: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.security.provider.DigestBase: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.security.provider.MD4: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.security.provider.DigestBase: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(49)<org.joda.time.chrono.JulianChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"(512)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"(512)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long,int)>";
    "(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"(578)<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>";
    "(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>"->"(412)<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.String: int length()>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"<java.lang.Object: void <clinit>()>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ResourceBundle: void <clinit>()>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.util.ResourceBundle: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>";
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.lang.String: void <clinit>()>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.lang.Object: void <clinit>()>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "<java.util.ResourceBundle$1: java.util.Enumeration getKeys()>"
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.util.ResourceBundle$1: java.util.Enumeration getKeys()>";
    "<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>"
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()>";
    "<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>"
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>";
    "<sun.util.ResourceBundleEnumeration: java.lang.Object nextElement()>"
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<sun.util.ResourceBundleEnumeration: java.lang.Object nextElement()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Throwable: void <clinit>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>"
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>"->"<java.lang.Object: void <init>()>";
    "(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>"
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>"
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>"->"(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>"
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>";
    "(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>";
    "<java.util.regex.Pattern: void <clinit>()>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: void <clinit>()>";
    "<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>";
    "(72)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(72)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>";
    "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(72)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Arrays: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(72)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "<java.lang.String: java.lang.String[] split(java.lang.String)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: java.lang.Object clone()>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "(366)<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>"
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(366)<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>";
    "(366)<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>"->"<java.lang.Object: void <init>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"
    "(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Math: int min(int,int)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Math: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>";
    "(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"
    "(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"->"(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>";
    "(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"->"(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "(113)<org.joda.time.base.AbstractPeriod: int get(org.joda.time.DurationFieldType)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>";
    "(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>"
    "(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>";
    "(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>"->"(617)<org.joda.time.PeriodType: int size()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>";
    "(249)<org.joda.time.base.BaseSingleFieldPeriod: int get(org.joda.time.DurationFieldType)>"->"(168)<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"(203)<org.joda.time.base.BaseSingleFieldPeriod: int size()>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"(56)<org.joda.time.base.AbstractPeriod: int size()>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"(59)<org.joda.time.base.BasePeriod$1: int getValue(int)>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>"
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>"->"(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Math: double log(double)>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Math: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "(105)<org.joda.time.chrono.GJEraDateTimeField: long roundCeiling(long)>"->"(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(79)<org.joda.time.field.DelegatedDurationField: org.joda.time.DurationFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(120)<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(390)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>"
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(390)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "(395)<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>"
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(395)<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>";
    "(395)<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(127)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax(int)>"
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax(int)>";
    "(413)<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax(int)>"
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(413)<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax(int)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(390)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(395)<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(127)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax(int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(413)<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax(int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Enum: boolean equals(java.lang.Object)>";
    "<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)>";
    "<java.lang.Integer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Integer: boolean equals(java.lang.Object)>";
    "<java.util.Vector: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Vector: boolean equals(java.lang.Object)>";
    "<java.security.cert.CertPath: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.CertPath: boolean equals(java.lang.Object)>";
    "<java.util.AbstractSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractSet: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>";
    "<sun.security.x509.Extension: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.Extension: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.KerberosTime: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.KerberosTime: boolean equals(java.lang.Object)>";
    "<java.util.AbstractMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractMap: boolean equals(java.lang.Object)>";
    "<java.nio.ShortBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.ShortBuffer: boolean equals(java.lang.Object)>";
    "<java.security.BasicPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.BasicPermission: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.CalendarDate: boolean equals(java.lang.Object)>";
    "<sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.provider.PolicyParser$PermissionEntry: boolean equals(java.lang.Object)>";
    "<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessBuilder$Redirect: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessBuilder$Redirect: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(301)<org.joda.time.base.BaseSingleFieldPeriod: boolean equals(java.lang.Object)>";
    "<java.security.AllPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.AllPermission: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.ImmutableGregorianDate: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.ImmutableGregorianDate: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(50)<org.joda.time.chrono.CopticChronology: boolean equals(java.lang.Object)>";
    "<java.util.AbstractList: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractList: boolean equals(java.lang.Object)>";
    "<java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Thread$WeakClassKey: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KeyTab: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KeyTab: boolean equals(java.lang.Object)>";
    "<java.text.DigitList: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DigitList: boolean equals(java.lang.Object)>";
    "<java.net.Inet6Address: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Inet6Address: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: boolean equals(java.lang.Object)>";
    "<java.util.BitSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.BitSet: boolean equals(java.lang.Object)>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Float: boolean equals(java.lang.Object)>";
    "<java.nio.IntBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.IntBuffer: boolean equals(java.lang.Object)>";
    "<java.text.FieldPosition: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.FieldPosition: boolean equals(java.lang.Object)>";
    "<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>";
    "<java.nio.FloatBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.FloatBuffer: boolean equals(java.lang.Object)>";
    "<sun.security.x509.AVA: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.AVA: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KerberosKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KerberosKey: boolean equals(java.lang.Object)>";
    "<java.util.Hashtable: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Hashtable: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedSet: boolean equals(java.lang.Object)>";
    "<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DecimalFormatSymbols: boolean equals(java.lang.Object)>";
    "<java.util.HashMap$Entry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.HashMap$Entry: boolean equals(java.lang.Object)>";
    "<java.text.PatternEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.PatternEntry: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralSubtrees: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralSubtrees: boolean equals(java.lang.Object)>";
    "<sun.security.x509.URIName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.URIName: boolean equals(java.lang.Object)>";
    "<java.nio.CharBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.CharBuffer: boolean equals(java.lang.Object)>";
    "<sun.security.pkcs.PKCS8Key: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.pkcs.PKCS8Key: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(75)<org.joda.time.UTCDateTimeZone: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X500Name: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X500Name: boolean equals(java.lang.Object)>";
    "<java.net.NetworkInterface: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.NetworkInterface: boolean equals(java.lang.Object)>";
    "<java.security.spec.ECFieldFp: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.ECFieldFp: boolean equals(java.lang.Object)>";
    "<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.WeakHashMap$Entry: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.KrbException: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.KrbException: boolean equals(java.lang.Object)>";
    "<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Hashtable$Entry: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SynchronizedList: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedList: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedList: boolean equals(java.lang.Object)>";
    "<java.nio.LongBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.LongBuffer: boolean equals(java.lang.Object)>";
    "<java.lang.StackTraceElement: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.StackTraceElement: boolean equals(java.lang.Object)>";
    "<java.net.Inet6Address$Inet6AddressHolder: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Inet6Address$Inet6AddressHolder: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Field: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Field: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(183)<org.joda.time.base.AbstractPeriod: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixUserPrincipals$User: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.fs.UnixUserPrincipals$User: boolean equals(java.lang.Object)>";
    "<java.nio.ByteBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.ByteBuffer: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.WeakCache$CacheKey: boolean equals(java.lang.Object)>";
    "<java.util.Locale: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Locale: boolean equals(java.lang.Object)>";
    "<java.lang.Short: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Short: boolean equals(java.lang.Object)>";
    "<java.util.jar.JarVerifier$VerifierCodeSource: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.JarVerifier$VerifierCodeSource: boolean equals(java.lang.Object)>";
    "<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.TreeMap$Entry: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.PrincipalName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.PrincipalName: boolean equals(java.lang.Object)>";
    "<sun.nio.ch.FileKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.ch.FileKey: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<java.util.Collections$ReverseComparator2: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$ReverseComparator2: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>";
    "<sun.security.x509.PolicyInformation: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.PolicyInformation: boolean equals(java.lang.Object)>";
    "<java.text.RuleBasedCollator: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.RuleBasedCollator: boolean equals(java.lang.Object)>";
    "(568)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(568)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean equals(java.lang.Object)>";
    "<sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.provider.PolicyParser$PrincipalEntry: boolean equals(java.lang.Object)>";
    "<javax.security.auth.Subject: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.Subject: boolean equals(java.lang.Object)>";
    "<java.text.StringCharacterIterator: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.StringCharacterIterator: boolean equals(java.lang.Object)>";
    "<java.util.Collections$EmptyList: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$EmptyList: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.Checksum: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.Checksum: boolean equals(java.lang.Object)>";
    "<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>";
    "<java.util.RegularEnumSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.RegularEnumSet: boolean equals(java.lang.Object)>";
    "<sun.security.x509.AlgorithmId: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.AlgorithmId: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X509CRLImpl$X509IssuerSerial: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(148)<org.joda.time.field.MillisDurationField: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableList: boolean equals(java.lang.Object)>";
    "<sun.security.x509.KeyIdentifier: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.KeyIdentifier: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: boolean equals(java.lang.Object)>";
    "<java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$EmptyMap: boolean equals(java.lang.Object)>";
    "<javax.naming.Reference: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.Reference: boolean equals(java.lang.Object)>";
    "<java.security.cert.Certificate: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.Certificate: boolean equals(java.lang.Object)>";
    "<java.text.RuleBasedBreakIterator: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.RuleBasedBreakIterator: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(49)<org.joda.time.chrono.JulianChronology: boolean equals(java.lang.Object)>";
    "<sun.misc.Signal: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.misc.Signal: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(475)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(242)<org.joda.time.DateTimeComparator: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SynchronizedSet: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(154)<org.joda.time.base.AbstractDuration: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$Variable: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixFileKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.fs.UnixFileKey: boolean equals(java.lang.Object)>";
    "<java.text.RuleBasedCollationKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.RuleBasedCollationKey: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.RDN: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.RDN: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralSubtree: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralSubtree: boolean equals(java.lang.Object)>";
    "<java.lang.Boolean: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Boolean: boolean equals(java.lang.Object)>";
    "(266)<org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(266)<org.joda.time.DurationFieldType$StandardDurationFieldType: boolean equals(java.lang.Object)>";
    "<java.security.AccessControlContext: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.AccessControlContext: boolean equals(java.lang.Object)>";
    "<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: boolean equals(java.lang.Object)>";
    "<sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.ObjectIdentifier: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.rcache.AuthTime: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.rcache.AuthTime: boolean equals(java.lang.Object)>";
    "<sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.DerInputBuffer: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X509CertInfo: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X509CertInfo: boolean equals(java.lang.Object)>";
    "<sun.security.x509.CertificatePolicyId: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.CertificatePolicyId: boolean equals(java.lang.Object)>";
    "<javax.naming.NameImpl: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.NameImpl: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "<sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.BuddhistCalendar: boolean equals(java.lang.Object)>";
    "<sun.security.util.BitArray: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.BitArray: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SetFromMap: boolean equals(java.lang.Object)>";
    "<sun.security.util.Cache$EqualByteArray: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.Cache$EqualByteArray: boolean equals(java.lang.Object)>";
    "<java.text.ParsePosition: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.ParsePosition: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KeyImpl: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KeyImpl: boolean equals(java.lang.Object)>";
    "<sun.text.IntHashtable: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.text.IntHashtable: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.WeakCache$CacheValue: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: boolean equals(java.lang.Object)>";
    "<java.text.DateFormatSymbols: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DateFormatSymbols: boolean equals(java.lang.Object)>";
    "<java.util.JumboEnumSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.JumboEnumSet: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableSet: boolean equals(java.lang.Object)>";
    "<sun.security.x509.OtherName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.OtherName: boolean equals(java.lang.Object)>";
    "<java.lang.Long: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Long: boolean equals(java.lang.Object)>";
    "<java.math.MathContext: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.math.MathContext: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.KRBError: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.KRBError: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$StringEntry: boolean equals(java.lang.Object)>";
    "<java.text.ChoiceFormat: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.ChoiceFormat: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$StringEntrySet: boolean equals(java.lang.Object)>";
    "<sun.security.x509.X509Key: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.X509Key: boolean equals(java.lang.Object)>";
    "<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.HostAddress: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.HostAddress: boolean equals(java.lang.Object)>";
    "<sun.text.CompactByteArray: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.text.CompactByteArray: boolean equals(java.lang.Object)>";
    "<java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.JapaneseImperialCalendar: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "<sun.security.x509.AccessDescription: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.AccessDescription: boolean equals(java.lang.Object)>";
    "<java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)>";
    "<sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.ch.SocketOptionRegistry$RegistryKey: boolean equals(java.lang.Object)>";
    "<java.security.CodeSource: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.CodeSource: boolean equals(java.lang.Object)>";
    "<java.net.URL: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.URL: boolean equals(java.lang.Object)>";
    "<sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.BaseLocale$Key: boolean equals(java.lang.Object)>";
    "<java.net.URI: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.URI: boolean equals(java.lang.Object)>";
    "(96)<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(96)<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet: boolean equals(java.lang.Object)>";
    "<sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.provider.PolicyFile$SelfPermission: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "<sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.jca.ProviderConfig: boolean equals(java.lang.Object)>";
    "<sun.security.x509.CRLExtensions: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.CRLExtensions: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>";
    "<java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.AttributedString$AttributedStringIterator: boolean equals(java.lang.Object)>";
    "<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: boolean equals(java.lang.Object)>";
    "<java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.ObjectStreamClass$FieldReflectorKey: boolean equals(java.lang.Object)>";
    "<java.net.SocketPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.SocketPermission: boolean equals(java.lang.Object)>";
    "<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString: boolean equals(java.lang.Object)>";
    "<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.SimpleTimeZone: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.internal.HostAddresses: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.internal.HostAddresses: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.WeakCache$LookupValue: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.WeakCache$LookupValue: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(635)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>";
    "<sun.security.x509.OIDName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.OIDName: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(50)<org.joda.time.chrono.EthiopicChronology: boolean equals(java.lang.Object)>";
    "<sun.security.x509.IPAddressName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.IPAddressName: boolean equals(java.lang.Object)>";
    "<sun.security.x509.CertificateExtensions: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.CertificateExtensions: boolean equals(java.lang.Object)>";
    "<java.util.PropertyPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.PropertyPermission: boolean equals(java.lang.Object)>";
    "<java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.ResourceBundle$CacheKey: boolean equals(java.lang.Object)>";
    "<java.lang.Character$Subset: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Character$Subset: boolean equals(java.lang.Object)>";
    "<java.nio.charset.Charset: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.charset.Charset: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableMap: boolean equals(java.lang.Object)>";
    "<sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.BaseLocale: boolean equals(java.lang.Object)>";
    "<sun.security.krb5.Realm: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.krb5.Realm: boolean equals(java.lang.Object)>";
    "<java.security.Timestamp: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.Timestamp: boolean equals(java.lang.Object)>";
    "<java.util.jar.Manifest: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.Manifest: boolean equals(java.lang.Object)>";
    "<java.math.BigInteger: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.math.BigInteger: boolean equals(java.lang.Object)>";
    "<sun.nio.fs.UnixPath: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.fs.UnixPath: boolean equals(java.lang.Object)>";
    "<sun.security.util.DerValue: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.util.DerValue: boolean equals(java.lang.Object)>";
    "<java.util.GregorianCalendar: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.GregorianCalendar: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: boolean equals(java.lang.Object)>";
    "<java.security.UnresolvedPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.UnresolvedPermission: boolean equals(java.lang.Object)>";
    "<sun.security.x509.DistributionPoint: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.DistributionPoint: boolean equals(java.lang.Object)>";
    "<java.net.Inet4Address: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Inet4Address: boolean equals(java.lang.Object)>";
    "<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>";
    "<java.security.spec.ECPoint: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.ECPoint: boolean equals(java.lang.Object)>";
    "<sun.security.x509.EDIPartyName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.EDIPartyName: boolean equals(java.lang.Object)>";
    "<java.util.Date: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Date: boolean equals(java.lang.Object)>";
    "<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.reflect.generics.reflectiveObjects.TypeVariableImpl: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(154)<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>";
    "<java.util.Collections$CheckedMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$CheckedMap: boolean equals(java.lang.Object)>";
    "<sun.misc.SoftCache$Entry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.misc.SoftCache$Entry: boolean equals(java.lang.Object)>";
    "<java.io.FilePermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.FilePermission: boolean equals(java.lang.Object)>";
    "<java.net.InterfaceAddress: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InterfaceAddress: boolean equals(java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$SynchronizedMap: boolean equals(java.lang.Object)>";
    "<java.text.SimpleDateFormat: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.SimpleDateFormat: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>";
    "<java.io.File: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.File: boolean equals(java.lang.Object)>";
    "<java.nio.file.attribute.FileTime$DaysAndNanos: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.nio.file.attribute.FileTime$DaysAndNanos: boolean equals(java.lang.Object)>";
    "<java.text.AttributeEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.AttributeEntry: boolean equals(java.lang.Object)>";
    "<java.lang.Byte: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Byte: boolean equals(java.lang.Object)>";
    "<java.util.IdentityHashMap: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.IdentityHashMap: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$Value: boolean equals(java.lang.Object)>";
    "<java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.Provider$ServiceKey: boolean equals(java.lang.Object)>";
    "<java.net.HttpCookie: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.HttpCookie: boolean equals(java.lang.Object)>";
    "<java.security.spec.ECFieldF2m: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.spec.ECFieldF2m: boolean equals(java.lang.Object)>";
    "<java.net.Proxy: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.Proxy: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.Era: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.Era: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Method: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Method: boolean equals(java.lang.Object)>";
    "<java.util.jar.Attributes: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.jar.Attributes: boolean equals(java.lang.Object)>";
    "<sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.calendar.ZoneInfo: boolean equals(java.lang.Object)>";
    "<java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.io.ObjectStreamClass$WeakClassKey: boolean equals(java.lang.Object)>";
    "<java.text.MessageFormat: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.MessageFormat: boolean equals(java.lang.Object)>";
    "<sun.util.PreHashedMap$2$1$1: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.PreHashedMap$2$1$1: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(127)<org.joda.time.field.PreciseDurationField: boolean equals(java.lang.Object)>";
    "<java.text.DecimalFormat: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.text.DecimalFormat: boolean equals(java.lang.Object)>";
    "<java.math.BigDecimal: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.math.BigDecimal: boolean equals(java.lang.Object)>";
    "<java.lang.Character: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Character: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.net.www.http.KeepAliveKey: boolean equals(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.ProcessEnvironment$StringValues: boolean equals(java.lang.Object)>";
    "<javax.naming.RefAddr: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.RefAddr: boolean equals(java.lang.Object)>";
    "<javax.naming.CompositeName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.naming.CompositeName: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>";
    "<sun.security.x509.GeneralNames: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.GeneralNames: boolean equals(java.lang.Object)>";
    "<sun.security.x509.DNSName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.DNSName: boolean equals(java.lang.Object)>";
    "<java.net.InetSocketAddress: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InetSocketAddress: boolean equals(java.lang.Object)>";
    "<sun.util.locale.LocaleExtensions: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.util.locale.LocaleExtensions: boolean equals(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: boolean equals(java.lang.Object)>";
    "<java.security.CodeSigner: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.CodeSigner: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "<java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.util.Locale$LocaleKey: boolean equals(java.lang.Object)>";
    "<java.security.cert.X509CRL: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.cert.X509CRL: boolean equals(java.lang.Object)>";
    "<java.net.InetSocketAddress$InetSocketAddressHolder: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InetSocketAddress$InetSocketAddressHolder: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>";
    "<java.net.InetAddress: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.net.InetAddress: boolean equals(java.lang.Object)>";
    "<sun.misc.ProxyGenerator$ConstantPool$IndirectEntry: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.misc.ProxyGenerator$ConstantPool$IndirectEntry: boolean equals(java.lang.Object)>";
    "<sun.security.x509.DistributionPointName: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.DistributionPointName: boolean equals(java.lang.Object)>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Double: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Proxy$Key1: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Proxy$Key2: boolean equals(java.lang.Object)>";
    "<java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.reflect.Proxy$KeyX: boolean equals(java.lang.Object)>";
    "<javax.security.auth.kerberos.KerberosPrincipal: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.kerberos.KerberosPrincipal: boolean equals(java.lang.Object)>";
    "<sun.nio.ch.Util$2: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.nio.ch.Util$2: boolean equals(java.lang.Object)>";
    "<java.security.Provider$UString: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.security.Provider$UString: boolean equals(java.lang.Object)>";
    "<sun.security.x509.RFC822Name: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<sun.security.x509.RFC822Name: boolean equals(java.lang.Object)>";
    "<javax.security.auth.PrivateCredentialPermission: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<javax.security.auth.PrivateCredentialPermission: boolean equals(java.lang.Object)>";
    "(884)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(884)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Date: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <clinit>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: void <clinit>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <clinit>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: void <clinit>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <init>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <init>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: int size()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: void <init>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"->"<java.lang.String: void <clinit>()>";
    "(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: int length()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: int length()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: int length()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(867)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>"
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(867)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>";
    "(867)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>"->"<java.lang.Object: void <init>()>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>";
    "<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>";
    "<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Throwable: void <clinit>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: void <init>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.text.SimpleDateFormat: java.lang.String toPattern()>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.SimpleDateFormat: java.lang.String toPattern()>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"
    "(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>";
    "(667)<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>"
    "(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"(667)<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"
    "(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>"->"(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(99)<org.joda.time.chrono.BasicDayOfYearDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(213)<org.joda.time.chrono.BasicWeekyearDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(80)<org.joda.time.field.PreciseDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(57)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(53)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(61)<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(55)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>";
    "(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"(667)<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>";
    "(102)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: boolean isLeap(long)>"->"(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>";
    "(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(107)<org.joda.time.chrono.BasicYearDateTimeField: boolean isLeap(long)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>";
    "(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>";
    "(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"(426)<org.joda.time.chrono.BasicChronology: int getYear(long)>";
    "(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>"->"(387)<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>";
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(85)<org.joda.time.chrono.BasicFixedMonthChronology: long getYearDifference(long,long)>";
    "(96)<org.joda.time.chrono.BasicYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(348)<org.joda.time.chrono.IslamicChronology: long getYearDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "(97)<org.joda.time.chrono.GJEraDateTimeField: long roundFloor(long)>"->"(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(117)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInYearMonth(int,int)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>"->"(400)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMonth(int,int)>";
    "(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"(112)<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>";
    "(344)<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>"->"(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>";
    "(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"(395)<org.joda.time.chrono.IslamicChronology: int getDaysInYear(int)>";
    "(69)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(93)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValueForSet(long,int)>"->"(390)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "(617)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>"
    "(97)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValueForSet(long,int)>"->"(617)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>";
    "(617)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>"->"(602)<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(65)<org.joda.time.chrono.BasicFixedMonthChronology: long setYear(long,int)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(330)<org.joda.time.chrono.IslamicChronology: long setYear(long,int)>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(520)<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(535)<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(107)<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfMonth(long)>"
    "(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"->"(107)<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfMonth(long)>";
    "(376)<org.joda.time.chrono.IslamicChronology: int getDayOfMonth(long)>"
    "(48)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int get(long)>"->"(376)<org.joda.time.chrono.IslamicChronology: int getDayOfMonth(long)>";
    "(376)<org.joda.time.chrono.IslamicChronology: int getDayOfMonth(long)>"->"(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "(107)<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfMonth(long)>"->"(504)<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>";
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"(137)<org.joda.time.chrono.BasicFixedMonthChronology: int getMonthOfYear(long,int)>";
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(475)<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>"->"(421)<org.joda.time.chrono.IslamicChronology: int getMonthOfYear(long,int)>";
    "(61)<org.joda.time.chrono.GJEraDateTimeField: int get(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(55)<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>"->"(315)<org.joda.time.chrono.IslamicChronology: int getYear(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(205)<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(207)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(161)<org.joda.time.field.DelegatedDurationField: int hashCode()>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(154)<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(154)<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(154)<org.joda.time.field.DelegatedDurationField: boolean equals(java.lang.Object)>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(229)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMaximumValue()>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(225)<org.joda.time.chrono.BasicWeekyearDateTimeField: int getMinimumValue()>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(65)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue()>"->"(390)<org.joda.time.chrono.IslamicChronology: int getDaysInYearMax()>";
    "(122)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax()>"
    "(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"->"(122)<org.joda.time.chrono.BasicFixedMonthChronology: int getDaysInMonthMax()>";
    "(408)<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax()>"
    "(60)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue()>"->"(408)<org.joda.time.chrono.IslamicChronology: int getDaysInMonthMax()>";
    "(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"(249)<org.joda.time.chrono.CopticChronology: int getMaxYear()>";
    "(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"(480)<org.joda.time.chrono.IslamicChronology: int getMaxYear()>";
    "(127)<org.joda.time.chrono.BasicYearDateTimeField: int getMaximumValue()>"->"(248)<org.joda.time.chrono.EthiopicChronology: int getMaxYear()>";
    "(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"(244)<org.joda.time.chrono.CopticChronology: int getMinYear()>";
    "(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"(475)<org.joda.time.chrono.IslamicChronology: int getMinYear()>";
    "(123)<org.joda.time.chrono.BasicYearDateTimeField: int getMinimumValue()>"->"(243)<org.joda.time.chrono.EthiopicChronology: int getMinYear()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(90)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(50)<org.joda.time.chrono.CopticChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(49)<org.joda.time.chrono.JulianChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(50)<org.joda.time.chrono.EthiopicChronology: int hashCode()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(970)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(943)<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Integer: int intValue()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(50)<org.joda.time.chrono.CopticChronology: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(65)<org.joda.time.chrono.IslamicChronology: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(49)<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(50)<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(94)<org.joda.time.field.DelegatedDurationField: boolean isPrecise()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(146)<org.joda.time.field.DelegatedDurationField: long getUnitMillis()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(235)<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(211)<org.joda.time.chrono.CopticChronology: boolean isLeapDay(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(210)<org.joda.time.chrono.EthiopicChronology: boolean isLeapDay(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(81)<org.joda.time.chrono.BasicGJChronology: boolean isLeapDay(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(142)<org.joda.time.field.DelegatedDurationField: long getDifferenceAsLong(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(138)<org.joda.time.field.DelegatedDurationField: int getDifference(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(134)<org.joda.time.field.DelegatedDurationField: long add(long,long)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(130)<org.joda.time.field.DelegatedDurationField: long add(long,int)>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Integer: int intValue()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.Object,java.lang.Object)>"
    "(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.Object,java.lang.Object)>"->"(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>";
    "(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.util.WeakHashMap$HashIterator: boolean hasNext()>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "<java.io.InputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "(884)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: boolean equals(java.lang.Object)>"->"<java.util.Locale: boolean equals(java.lang.Object)>";
    "(876)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: int hashCode()>"
    "<java.util.Locale: int hashCode()>"
    "(876)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: int hashCode()>"->"<java.util.Locale: int hashCode()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Date: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>"
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"
    "(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"->"(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.String: void <clinit>()>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "<java.util.regex.Matcher: boolean matches()>"
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.util.regex.Matcher: boolean matches()>";
    "(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"->"(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Vector: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.KerberosTime: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.crypto.crc32: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayDeque: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.EncryptionKey: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Locale: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.PrincipalName: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.EncryptedData: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.ETypeInfo2: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.EnumSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.AuthorizationData: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<javax.naming.Reference: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JumboEnumSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern$CharPropertyNames$CloneableProperty: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.HostAddress: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.AuthorizationDataEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.HostAddresses: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.PAData: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.ETypeInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.Realm: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Date: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.Ticket: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.provider.MD4: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<javax.crypto.Mac: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.LastReqEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<javax.naming.CompositeName: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.krb5.internal.TicketFlags: java.lang.Object clone()>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(79)<org.joda.time.field.SkipUndoDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(249)<org.joda.time.chrono.ZonedChronology: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(132)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(854)<org.joda.time.DateTimeZone: boolean isStandardOffset(long)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(158)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(81)<org.joda.time.field.ZeroIsMaxDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(82)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(80)<org.joda.time.chrono.GJYearOfEraDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(77)<org.joda.time.field.ZeroIsMaxDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(78)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(76)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(112)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(106)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(202)<org.joda.time.field.ZeroIsMaxDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(116)<org.joda.time.chrono.GJYearOfEraDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(110)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(94)<org.joda.time.field.ZeroIsMaxDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(182)<org.joda.time.field.ZeroIsMaxDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(108)<org.joda.time.chrono.GJYearOfEraDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(102)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(61)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(62)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(60)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(65)<org.joda.time.field.ZeroIsMaxDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(66)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(64)<org.joda.time.chrono.GJYearOfEraDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(53)<org.joda.time.field.ZeroIsMaxDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(52)<org.joda.time.chrono.GJYearOfEraDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(57)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(102)<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(148)<org.joda.time.field.ZeroIsMaxDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(104)<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>";
    "<java.net.HttpURLConnection: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.net.HttpURLConnection: void <clinit>()>";
    "<java.net.URLConnection: void <clinit>()>"
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.net.URLConnection: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<sun.net.www.protocol.http.HttpURLConnection: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.net.HttpURLConnection: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.net.URLConnection: void <clinit>()>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.CopticChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(65)<org.joda.time.chrono.IslamicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(50)<org.joda.time.chrono.EthiopicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(113)<org.joda.time.chrono.ZonedChronology: long getDateTimeMillis(int,int,int,int)>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>";
    "(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(1227)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean isFixed()>"
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(1227)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean isFixed()>";
    "<java.io.BufferedInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "<sun.net.www.http.HttpCaptureInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "<sun.net.www.MeteredStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "<sun.net.www.http.KeepAliveStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "<sun.net.www.http.ChunkedInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "<java.net.SocketInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.net.SocketInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.net.SocketInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.net.SocketInputStream: void close()>";
}
